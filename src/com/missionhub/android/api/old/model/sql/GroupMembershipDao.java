package com.missionhub.android.api.old.model.sql;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.SqlUtils;
import de.greenrobot.dao.Query;
import de.greenrobot.dao.QueryBuilder;

import com.missionhub.android.api.old.model.sql.GroupMembership;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table GROUP_MEMBERSHIP.
*/
public class GroupMembershipDao extends AbstractDao<GroupMembership, Long> {

    public static final String TABLENAME = "GROUP_MEMBERSHIP";

    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Person_id = new Property(1, Long.class, "person_id", false, "PERSON_ID");
        public final static Property Group_id = new Property(2, Long.class, "group_id", false, "GROUP_ID");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Role = new Property(4, String.class, "role", false, "ROLE");
    };

    private DaoSession daoSession;

    private Query<GroupMembership> person_GroupsQuery;
    private Query<GroupMembership> group_MembersQuery;

    public GroupMembershipDao(DaoConfig config) {
        super(config);
    }
    
    public GroupMembershipDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String sql = "CREATE TABLE " + (ifNotExists? "IF NOT EXISTS ": "") + "'GROUP_MEMBERSHIP' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'PERSON_ID' INTEGER," + // 1: person_id
                "'GROUP_ID' INTEGER," + // 2: group_id
                "'NAME' TEXT," + // 3: name
                "'ROLE' TEXT);"; // 4: role
        db.execSQL(sql);
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GROUP_MEMBERSHIP'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, GroupMembership entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long person_id = entity.getPerson_id();
        if (person_id != null) {
            stmt.bindLong(2, person_id);
        }
 
        Long group_id = entity.getGroup_id();
        if (group_id != null) {
            stmt.bindLong(3, group_id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String role = entity.getRole();
        if (role != null) {
            stmt.bindString(5, role);
        }
    }

    @Override
    protected void attachEntity(GroupMembership entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public GroupMembership readEntity(Cursor cursor, int offset) {
        GroupMembership entity = new GroupMembership( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // person_id
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // group_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // role
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, GroupMembership entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPerson_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setGroup_id(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRole(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected Long updateKeyAfterInsert(GroupMembership entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(GroupMembership entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "groups" to-many relationship of Person. */
    public synchronized List<GroupMembership> _queryPerson_Groups(Long person_id) {
        if (person_GroupsQuery == null) {
            QueryBuilder<GroupMembership> queryBuilder = queryBuilder();
            queryBuilder.where(Properties.Person_id.eq(person_id));
            person_GroupsQuery = queryBuilder.build();
        } else {
            person_GroupsQuery.setParameter(0, person_id);
        }
        return person_GroupsQuery.list();
    }

    /** Internal query to resolve the "members" to-many relationship of Group. */
    public synchronized List<GroupMembership> _queryGroup_Members(Long group_id) {
        if (group_MembersQuery == null) {
            QueryBuilder<GroupMembership> queryBuilder = queryBuilder();
            queryBuilder.where(Properties.Group_id.eq(group_id));
            group_MembersQuery = queryBuilder.build();
        } else {
            group_MembersQuery.setParameter(0, group_id);
        }
        return group_MembersQuery.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getPersonDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getGroupDao().getAllColumns());
            builder.append(" FROM GROUP_MEMBERSHIP T");
            builder.append(" LEFT JOIN PERSON T0 ON T.'PERSON_ID'=T0.'_id'");
            builder.append(" LEFT JOIN GROUPS T1 ON T.'GROUP_ID'=T1.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected GroupMembership loadCurrentDeep(Cursor cursor, boolean lock) {
        GroupMembership entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Person person = loadCurrentOther(daoSession.getPersonDao(), cursor, offset);
        entity.setPerson(person);
        offset += daoSession.getPersonDao().getAllColumns().length;

        Group group = loadCurrentOther(daoSession.getGroupDao(), cursor, offset);
        entity.setGroup(group);

        return entity;    
    }

    public GroupMembership loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<GroupMembership> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<GroupMembership> list = new ArrayList<GroupMembership>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<GroupMembership> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<GroupMembership> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
