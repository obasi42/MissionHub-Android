package com.missionhub.android.api.old.model.sql;

import java.util.List;

import com.missionhub.android.api.old.model.sql.DaoSession;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table GROUP_LABELS.
 */
public class GroupLabels {

    private Long id;
    private Long group_id;
    private Long label_id;

    /** Used to resolve relations */
    private DaoSession daoSession;

    /** Used for active entity operations. */
    private GroupLabelsDao myDao;

    private Group group;
    private Long group__resolvedKey;

    private GroupLabel groupLabel;
    private Long groupLabel__resolvedKey;

    private List<GroupLabels> GroupLabels;

    public GroupLabels() {
    }

    public GroupLabels(Long id) {
        this.id = id;
    }

    public GroupLabels(Long id, Long group_id, Long label_id) {
        this.id = id;
        this.group_id = group_id;
        this.label_id = label_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getGroupLabelsDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getGroup_id() {
        return group_id;
    }

    public void setGroup_id(Long group_id) {
        this.group_id = group_id;
    }

    public Long getLabel_id() {
        return label_id;
    }

    public void setLabel_id(Long label_id) {
        this.label_id = label_id;
    }

    /** To-one relationship, resolved on first access. */
    public Group getGroup() {
        if (group__resolvedKey == null || !group__resolvedKey.equals(group_id)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GroupDao targetDao = daoSession.getGroupDao();
            group = targetDao.load(group_id);
            group__resolvedKey = group_id;
        }
        return group;
    }

    public void setGroup(Group group) {
        this.group = group;
        group_id = group == null ? null : group.getId();
        group__resolvedKey = group_id;
    }

    /** To-one relationship, resolved on first access. */
    public GroupLabel getGroupLabel() {
        if (groupLabel__resolvedKey == null || !groupLabel__resolvedKey.equals(label_id)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GroupLabelDao targetDao = daoSession.getGroupLabelDao();
            groupLabel = targetDao.load(label_id);
            groupLabel__resolvedKey = label_id;
        }
        return groupLabel;
    }

    public void setGroupLabel(GroupLabel groupLabel) {
        this.groupLabel = groupLabel;
        label_id = groupLabel == null ? null : groupLabel.getId();
        groupLabel__resolvedKey = label_id;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public synchronized List<GroupLabels> getGroupLabels() {
        if (GroupLabels == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GroupLabelsDao targetDao = daoSession.getGroupLabelsDao();
            GroupLabels = targetDao._queryGroupLabels_GroupLabels(id);
        }
        return GroupLabels;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetGroupLabels() {
        GroupLabels = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
