package com.missionhub.api.model.sql;

import java.util.List;
import com.missionhub.api.model.sql.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table FOLLOWUP_COMMENT (schema version 1).
 */
public class FollowupComment {

    private Integer _id;
    private Integer contact_id;
    private Integer commenter_id;
    private String comment;
    private String status;
    private java.util.Date created_at;

    /** Used to resolve relations */
    private DaoSession daoSession;

    /** Used for active entity operations. */
    private FollowupCommentDao myDao;

    private List<Rejoicable> rejoicables;

    public FollowupComment() {
    }

    public FollowupComment(Integer _id) {
        this._id = _id;
    }

    public FollowupComment(Integer _id, Integer contact_id, Integer commenter_id, String comment, String status, java.util.Date created_at) {
        this._id = _id;
        this.contact_id = contact_id;
        this.commenter_id = commenter_id;
        this.comment = comment;
        this.status = status;
        this.created_at = created_at;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getFollowupCommentDao() : null;
    }

    public Integer get_id() {
        return _id;
    }

    public void set_id(Integer _id) {
        this._id = _id;
    }

    public Integer getContact_id() {
        return contact_id;
    }

    public void setContact_id(Integer contact_id) {
        this.contact_id = contact_id;
    }

    public Integer getCommenter_id() {
        return commenter_id;
    }

    public void setCommenter_id(Integer commenter_id) {
        this.commenter_id = commenter_id;
    }

    public String getComment() {
        return comment;
    }

    public void setComment(String comment) {
        this.comment = comment;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public java.util.Date getCreated_at() {
        return created_at;
    }

    public void setCreated_at(java.util.Date created_at) {
        this.created_at = created_at;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public synchronized List<Rejoicable> getRejoicables() {
        if (rejoicables == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RejoicableDao targetDao = daoSession.getRejoicableDao();
            rejoicables = targetDao._queryFollowupComment_Rejoicables(_id);
        }
        return rejoicables;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetRejoicables() {
        rejoicables = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
