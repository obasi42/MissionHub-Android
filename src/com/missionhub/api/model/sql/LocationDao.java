package com.missionhub.api.model.sql;

import java.util.List;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.Query;
import de.greenrobot.dao.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table LOCATION.
 */
public class LocationDao extends AbstractDao<Location, Long> {

	public static final String TABLENAME = "LOCATION";

	public static class Properties {
		public final static Property Id = new Property(0, Long.class, "id", true, "_id");
		public final static Property Person_id = new Property(1, Long.class, "person_id", false, "PERSON_ID");
		public final static Property Name = new Property(2, String.class, "name", false, "NAME");
		public final static Property Location_id = new Property(3, String.class, "location_id", false, "LOCATION_ID");
		public final static Property Provider = new Property(4, String.class, "provider", false, "PROVIDER");
	};

	private Query<Location> person_LocationListQuery;

	public LocationDao(final DaoConfig config) {
		super(config);
	}

	public LocationDao(final DaoConfig config, final DaoSession daoSession) {
		super(config, daoSession);
	}

	/** Creates the underlying database table. */
	public static void createTable(final SQLiteDatabase db, final boolean ifNotExists) {
		final String sql = "CREATE TABLE " + (ifNotExists ? "IF NOT EXISTS " : "") + "'LOCATION' (" + //
				"'_id' INTEGER PRIMARY KEY ," + // 0: id
				"'PERSON_ID' INTEGER," + // 1: person_id
				"'NAME' TEXT," + // 2: name
				"'LOCATION_ID' TEXT," + // 3: location_id
				"'PROVIDER' TEXT);"; // 4: provider
		db.execSQL(sql);
	}

	/** Drops the underlying database table. */
	public static void dropTable(final SQLiteDatabase db, final boolean ifExists) {
		final String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'LOCATION'";
		db.execSQL(sql);
	}

	/** @inheritdoc */
	@Override
	protected void bindValues(final SQLiteStatement stmt, final Location entity) {
		stmt.clearBindings();

		final Long id = entity.getId();
		if (id != null) {
			stmt.bindLong(1, id);
		}

		final Long person_id = entity.getPerson_id();
		if (person_id != null) {
			stmt.bindLong(2, person_id);
		}

		final String name = entity.getName();
		if (name != null) {
			stmt.bindString(3, name);
		}

		final String location_id = entity.getLocation_id();
		if (location_id != null) {
			stmt.bindString(4, location_id);
		}

		final String provider = entity.getProvider();
		if (provider != null) {
			stmt.bindString(5, provider);
		}
	}

	/** @inheritdoc */
	@Override
	public Long readKey(final Cursor cursor, final int offset) {
		return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
	}

	/** @inheritdoc */
	@Override
	public Location readEntity(final Cursor cursor, final int offset) {
		final Location entity = new Location( //
				cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
				cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // person_id
				cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
				cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // location_id
				cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // provider
		);
		return entity;
	}

	/** @inheritdoc */
	@Override
	public void readEntity(final Cursor cursor, final Location entity, final int offset) {
		entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
		entity.setPerson_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
		entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
		entity.setLocation_id(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
		entity.setProvider(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
	}

	@Override
	protected Long updateKeyAfterInsert(final Location entity, final long rowId) {
		entity.setId(rowId);
		return rowId;
	}

	/** @inheritdoc */
	@Override
	public Long getKey(final Location entity) {
		if (entity != null) {
			return entity.getId();
		} else {
			return null;
		}
	}

	/** @inheritdoc */
	@Override
	protected boolean isEntityUpdateable() {
		return true;
	}

	/**
	 * Internal query to resolve the "locationList" to-many relationship of
	 * Person.
	 */
	public synchronized List<Location> _queryPerson_LocationList(final Long person_id) {
		if (person_LocationListQuery == null) {
			final QueryBuilder<Location> queryBuilder = queryBuilder();
			queryBuilder.where(Properties.Person_id.eq(person_id));
			person_LocationListQuery = queryBuilder.build();
		} else {
			person_LocationListQuery.setParameter(0, person_id);
		}
		return person_LocationListQuery.list();
	}

}
