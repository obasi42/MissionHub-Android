package com.missionhub.api.model.sql;

import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table PERSON.
 */
public class Person {

	private Long id;
	private String name;
	private String gender;
	private String fb_id;
	private String picture;
	private String status;
	private String first_name;
	private String last_name;
	private String phone_number;
	private String email_address;
	private String birthday;
	private String locale;
	private String num_contacts;

	/** Used to resolve relations */
	private DaoSession daoSession;

	/** Used for active entity operations. */
	private PersonDao myDao;

	private List<Assignment> assigned_contacts;
	private List<Assignment> assigned_to_contacts;
	private List<Interest> interestList;
	private List<Education> educationList;
	private List<Location> locationList;
	private List<OrganizationalRole> organizationalRoleList;
	private List<GroupMembership> groups;
	private List<FollowupComment> followup_comments;
	private List<FollowupComment> posted_comments;
	private List<Answer> answerList;

	public Person() {}

	public Person(final Long id) {
		this.id = id;
	}

	public Person(final Long id, final String name, final String gender, final String fb_id, final String picture, final String status, final String first_name,
			final String last_name, final String phone_number, final String email_address, final String birthday, final String locale, final String num_contacts) {
		this.id = id;
		this.name = name;
		this.gender = gender;
		this.fb_id = fb_id;
		this.picture = picture;
		this.status = status;
		this.first_name = first_name;
		this.last_name = last_name;
		this.phone_number = phone_number;
		this.email_address = email_address;
		this.birthday = birthday;
		this.locale = locale;
		this.num_contacts = num_contacts;
	}

	/** called by internal mechanisms, do not call yourself. */
	public void __setDaoSession(final DaoSession daoSession) {
		this.daoSession = daoSession;
		myDao = daoSession != null ? daoSession.getPersonDao() : null;
	}

	public Long getId() {
		return id;
	}

	public void setId(final Long id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(final String name) {
		this.name = name;
	}

	public String getGender() {
		return gender;
	}

	public void setGender(final String gender) {
		this.gender = gender;
	}

	public String getFb_id() {
		return fb_id;
	}

	public void setFb_id(final String fb_id) {
		this.fb_id = fb_id;
	}

	public String getPicture() {
		return picture;
	}

	public void setPicture(final String picture) {
		this.picture = picture;
	}

	public String getStatus() {
		return status;
	}

	public void setStatus(final String status) {
		this.status = status;
	}

	public String getFirst_name() {
		return first_name;
	}

	public void setFirst_name(final String first_name) {
		this.first_name = first_name;
	}

	public String getLast_name() {
		return last_name;
	}

	public void setLast_name(final String last_name) {
		this.last_name = last_name;
	}

	public String getPhone_number() {
		return phone_number;
	}

	public void setPhone_number(final String phone_number) {
		this.phone_number = phone_number;
	}

	public String getEmail_address() {
		return email_address;
	}

	public void setEmail_address(final String email_address) {
		this.email_address = email_address;
	}

	public String getBirthday() {
		return birthday;
	}

	public void setBirthday(final String birthday) {
		this.birthday = birthday;
	}

	public String getLocale() {
		return locale;
	}

	public void setLocale(final String locale) {
		this.locale = locale;
	}

	public String getNum_contacts() {
		return num_contacts;
	}

	public void setNum_contacts(final String num_contacts) {
		this.num_contacts = num_contacts;
	}

	/**
	 * To-many relationship, resolved on first access (and after reset). Changes
	 * to to-many relations are not persisted, make changes to the target
	 * entity.
	 */
	public synchronized List<Assignment> getAssigned_contacts() {
		if (assigned_contacts == null) {
			if (daoSession == null) {
				throw new DaoException("Entity is detached from DAO context");
			}
			final AssignmentDao targetDao = daoSession.getAssignmentDao();
			assigned_contacts = targetDao._queryPerson_Assigned_contacts(id);
		}
		return assigned_contacts;
	}

	/**
	 * Resets a to-many relationship, making the next get call to query for a
	 * fresh result.
	 */
	public synchronized void resetAssigned_contacts() {
		assigned_contacts = null;
	}

	/**
	 * To-many relationship, resolved on first access (and after reset). Changes
	 * to to-many relations are not persisted, make changes to the target
	 * entity.
	 */
	public synchronized List<Assignment> getAssigned_to_contacts() {
		if (assigned_to_contacts == null) {
			if (daoSession == null) {
				throw new DaoException("Entity is detached from DAO context");
			}
			final AssignmentDao targetDao = daoSession.getAssignmentDao();
			assigned_to_contacts = targetDao._queryPerson_Assigned_to_contacts(id);
		}
		return assigned_to_contacts;
	}

	/**
	 * Resets a to-many relationship, making the next get call to query for a
	 * fresh result.
	 */
	public synchronized void resetAssigned_to_contacts() {
		assigned_to_contacts = null;
	}

	/**
	 * To-many relationship, resolved on first access (and after reset). Changes
	 * to to-many relations are not persisted, make changes to the target
	 * entity.
	 */
	public synchronized List<Interest> getInterestList() {
		if (interestList == null) {
			if (daoSession == null) {
				throw new DaoException("Entity is detached from DAO context");
			}
			final InterestDao targetDao = daoSession.getInterestDao();
			interestList = targetDao._queryPerson_InterestList(id);
		}
		return interestList;
	}

	/**
	 * Resets a to-many relationship, making the next get call to query for a
	 * fresh result.
	 */
	public synchronized void resetInterestList() {
		interestList = null;
	}

	/**
	 * To-many relationship, resolved on first access (and after reset). Changes
	 * to to-many relations are not persisted, make changes to the target
	 * entity.
	 */
	public synchronized List<Education> getEducationList() {
		if (educationList == null) {
			if (daoSession == null) {
				throw new DaoException("Entity is detached from DAO context");
			}
			final EducationDao targetDao = daoSession.getEducationDao();
			educationList = targetDao._queryPerson_EducationList(id);
		}
		return educationList;
	}

	/**
	 * Resets a to-many relationship, making the next get call to query for a
	 * fresh result.
	 */
	public synchronized void resetEducationList() {
		educationList = null;
	}

	/**
	 * To-many relationship, resolved on first access (and after reset). Changes
	 * to to-many relations are not persisted, make changes to the target
	 * entity.
	 */
	public synchronized List<Location> getLocationList() {
		if (locationList == null) {
			if (daoSession == null) {
				throw new DaoException("Entity is detached from DAO context");
			}
			final LocationDao targetDao = daoSession.getLocationDao();
			locationList = targetDao._queryPerson_LocationList(id);
		}
		return locationList;
	}

	/**
	 * Resets a to-many relationship, making the next get call to query for a
	 * fresh result.
	 */
	public synchronized void resetLocationList() {
		locationList = null;
	}

	/**
	 * To-many relationship, resolved on first access (and after reset). Changes
	 * to to-many relations are not persisted, make changes to the target
	 * entity.
	 */
	public synchronized List<OrganizationalRole> getOrganizationalRoleList() {
		if (organizationalRoleList == null) {
			if (daoSession == null) {
				throw new DaoException("Entity is detached from DAO context");
			}
			final OrganizationalRoleDao targetDao = daoSession.getOrganizationalRoleDao();
			organizationalRoleList = targetDao._queryPerson_OrganizationalRoleList(id);
		}
		return organizationalRoleList;
	}

	/**
	 * Resets a to-many relationship, making the next get call to query for a
	 * fresh result.
	 */
	public synchronized void resetOrganizationalRoleList() {
		organizationalRoleList = null;
	}

	/**
	 * To-many relationship, resolved on first access (and after reset). Changes
	 * to to-many relations are not persisted, make changes to the target
	 * entity.
	 */
	public synchronized List<GroupMembership> getGroups() {
		if (groups == null) {
			if (daoSession == null) {
				throw new DaoException("Entity is detached from DAO context");
			}
			final GroupMembershipDao targetDao = daoSession.getGroupMembershipDao();
			groups = targetDao._queryPerson_Groups(id);
		}
		return groups;
	}

	/**
	 * Resets a to-many relationship, making the next get call to query for a
	 * fresh result.
	 */
	public synchronized void resetGroups() {
		groups = null;
	}

	/**
	 * To-many relationship, resolved on first access (and after reset). Changes
	 * to to-many relations are not persisted, make changes to the target
	 * entity.
	 */
	public synchronized List<FollowupComment> getFollowup_comments() {
		if (followup_comments == null) {
			if (daoSession == null) {
				throw new DaoException("Entity is detached from DAO context");
			}
			final FollowupCommentDao targetDao = daoSession.getFollowupCommentDao();
			followup_comments = targetDao._queryPerson_Followup_comments(id);
		}
		return followup_comments;
	}

	/**
	 * Resets a to-many relationship, making the next get call to query for a
	 * fresh result.
	 */
	public synchronized void resetFollowup_comments() {
		followup_comments = null;
	}

	/**
	 * To-many relationship, resolved on first access (and after reset). Changes
	 * to to-many relations are not persisted, make changes to the target
	 * entity.
	 */
	public synchronized List<FollowupComment> getPosted_comments() {
		if (posted_comments == null) {
			if (daoSession == null) {
				throw new DaoException("Entity is detached from DAO context");
			}
			final FollowupCommentDao targetDao = daoSession.getFollowupCommentDao();
			posted_comments = targetDao._queryPerson_Posted_comments(id);
		}
		return posted_comments;
	}

	/**
	 * Resets a to-many relationship, making the next get call to query for a
	 * fresh result.
	 */
	public synchronized void resetPosted_comments() {
		posted_comments = null;
	}

	/**
	 * To-many relationship, resolved on first access (and after reset). Changes
	 * to to-many relations are not persisted, make changes to the target
	 * entity.
	 */
	public synchronized List<Answer> getAnswerList() {
		if (answerList == null) {
			if (daoSession == null) {
				throw new DaoException("Entity is detached from DAO context");
			}
			final AnswerDao targetDao = daoSession.getAnswerDao();
			answerList = targetDao._queryPerson_AnswerList(id);
		}
		return answerList;
	}

	/**
	 * Resets a to-many relationship, making the next get call to query for a
	 * fresh result.
	 */
	public synchronized void resetAnswerList() {
		answerList = null;
	}

	/**
	 * Convenient call for {@link AbstractDao#delete(Object)}. Entity must
	 * attached to an entity context.
	 */
	public void delete() {
		if (myDao == null) {
			throw new DaoException("Entity is detached from DAO context");
		}
		myDao.delete(this);
	}

	/**
	 * Convenient call for {@link AbstractDao#update(Object)}. Entity must
	 * attached to an entity context.
	 */
	public void update() {
		if (myDao == null) {
			throw new DaoException("Entity is detached from DAO context");
		}
		myDao.update(this);
	}

	/**
	 * Convenient call for {@link AbstractDao#refresh(Object)}. Entity must
	 * attached to an entity context.
	 */
	public void refresh() {
		if (myDao == null) {
			throw new DaoException("Entity is detached from DAO context");
		}
		myDao.refresh(this);
	}

}
