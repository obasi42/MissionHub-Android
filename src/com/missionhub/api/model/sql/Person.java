package com.missionhub.api.model.sql;

import java.util.List;
import com.missionhub.api.model.sql.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table PERSON.
 */
public class Person {

    private int _id;
    private String name;
    private String gender;
    private String fb_id;
    private String picture;
    private String status;
    private String first_name;
    private String last_name;
    private String phone_number;
    private String email_address;
    private String birthday;
    private String locale;

    /** Used to resolve relations */
    private DaoSession daoSession;

    /** Used for active entity operations. */
    private PersonDao myDao;

    private List<Assignment> assigned_contacts;
    private List<Assignment> assigned_to_contacts;
    private List<Interest> interest;
    private List<Education> education;
    private List<Location> location;
    private List<OrganizationalRole> organizationalRole;
    private List<FollowupComment> followup_comments;
    private List<FollowupComment> posted_comments;
    private List<Answer> answer;

    public Person() {
    }

    public Person(int _id) {
        this._id = _id;
    }

    public Person(int _id, String name, String gender, String fb_id, String picture, String status, String first_name, String last_name, String phone_number, String email_address, String birthday, String locale) {
        this._id = _id;
        this.name = name;
        this.gender = gender;
        this.fb_id = fb_id;
        this.picture = picture;
        this.status = status;
        this.first_name = first_name;
        this.last_name = last_name;
        this.phone_number = phone_number;
        this.email_address = email_address;
        this.birthday = birthday;
        this.locale = locale;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPersonDao() : null;
    }

    public int get_id() {
        return _id;
    }

    public void set_id(int _id) {
        this._id = _id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getGender() {
        return gender;
    }

    public void setGender(String gender) {
        this.gender = gender;
    }

    public String getFb_id() {
        return fb_id;
    }

    public void setFb_id(String fb_id) {
        this.fb_id = fb_id;
    }

    public String getPicture() {
        return picture;
    }

    public void setPicture(String picture) {
        this.picture = picture;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public String getFirst_name() {
        return first_name;
    }

    public void setFirst_name(String first_name) {
        this.first_name = first_name;
    }

    public String getLast_name() {
        return last_name;
    }

    public void setLast_name(String last_name) {
        this.last_name = last_name;
    }

    public String getPhone_number() {
        return phone_number;
    }

    public void setPhone_number(String phone_number) {
        this.phone_number = phone_number;
    }

    public String getEmail_address() {
        return email_address;
    }

    public void setEmail_address(String email_address) {
        this.email_address = email_address;
    }

    public String getBirthday() {
        return birthday;
    }

    public void setBirthday(String birthday) {
        this.birthday = birthday;
    }

    public String getLocale() {
        return locale;
    }

    public void setLocale(String locale) {
        this.locale = locale;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public synchronized List<Assignment> getAssigned_contacts() {
        if (assigned_contacts == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AssignmentDao targetDao = daoSession.getAssignmentDao();
            assigned_contacts = targetDao._queryPerson_Assigned_contacts(_id);
        }
        return assigned_contacts;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetAssigned_contacts() {
        assigned_contacts = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public synchronized List<Assignment> getAssigned_to_contacts() {
        if (assigned_to_contacts == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AssignmentDao targetDao = daoSession.getAssignmentDao();
            assigned_to_contacts = targetDao._queryPerson_Assigned_to_contacts(_id);
        }
        return assigned_to_contacts;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetAssigned_to_contacts() {
        assigned_to_contacts = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public synchronized List<Interest> getInterest() {
        if (interest == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            InterestDao targetDao = daoSession.getInterestDao();
            interest = targetDao._queryPerson_Interest(_id);
        }
        return interest;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetInterest() {
        interest = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public synchronized List<Education> getEducation() {
        if (education == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            EducationDao targetDao = daoSession.getEducationDao();
            education = targetDao._queryPerson_Education(_id);
        }
        return education;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetEducation() {
        education = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public synchronized List<Location> getLocation() {
        if (location == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LocationDao targetDao = daoSession.getLocationDao();
            location = targetDao._queryPerson_Location(_id);
        }
        return location;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetLocation() {
        location = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public synchronized List<OrganizationalRole> getOrganizationalRole() {
        if (organizationalRole == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            OrganizationalRoleDao targetDao = daoSession.getOrganizationalRoleDao();
            organizationalRole = targetDao._queryPerson_OrganizationalRole(_id);
        }
        return organizationalRole;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetOrganizationalRole() {
        organizationalRole = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public synchronized List<FollowupComment> getFollowup_comments() {
        if (followup_comments == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            FollowupCommentDao targetDao = daoSession.getFollowupCommentDao();
            followup_comments = targetDao._queryPerson_Followup_comments(_id);
        }
        return followup_comments;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetFollowup_comments() {
        followup_comments = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public synchronized List<FollowupComment> getPosted_comments() {
        if (posted_comments == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            FollowupCommentDao targetDao = daoSession.getFollowupCommentDao();
            posted_comments = targetDao._queryPerson_Posted_comments(_id);
        }
        return posted_comments;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetPosted_comments() {
        posted_comments = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public synchronized List<Answer> getAnswer() {
        if (answer == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AnswerDao targetDao = daoSession.getAnswerDao();
            answer = targetDao._queryPerson_Answer(_id);
        }
        return answer;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetAnswer() {
        answer = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
