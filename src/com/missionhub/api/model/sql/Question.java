package com.missionhub.api.model.sql;

import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table QUESTION.
 */
public class Question {

	private Long id;
	private Long keyword_id;
	private String label;
	private String kind;
	private String style;
	private Boolean required;
	private Boolean active;

	/** Used to resolve relations */
	private DaoSession daoSession;

	/** Used for active entity operations. */
	private QuestionDao myDao;

	private Keyword keyword;
	private Long keyword__resolvedKey;

	private List<Question> questionList;

	public Question() {}

	public Question(final Long id) {
		this.id = id;
	}

	public Question(final Long id, final Long keyword_id, final String label, final String kind, final String style, final Boolean required, final Boolean active) {
		this.id = id;
		this.keyword_id = keyword_id;
		this.label = label;
		this.kind = kind;
		this.style = style;
		this.required = required;
		this.active = active;
	}

	/** called by internal mechanisms, do not call yourself. */
	public void __setDaoSession(final DaoSession daoSession) {
		this.daoSession = daoSession;
		myDao = daoSession != null ? daoSession.getQuestionDao() : null;
	}

	public Long getId() {
		return id;
	}

	public void setId(final Long id) {
		this.id = id;
	}

	public Long getKeyword_id() {
		return keyword_id;
	}

	public void setKeyword_id(final Long keyword_id) {
		this.keyword_id = keyword_id;
	}

	public String getLabel() {
		return label;
	}

	public void setLabel(final String label) {
		this.label = label;
	}

	public String getKind() {
		return kind;
	}

	public void setKind(final String kind) {
		this.kind = kind;
	}

	public String getStyle() {
		return style;
	}

	public void setStyle(final String style) {
		this.style = style;
	}

	public Boolean getRequired() {
		return required;
	}

	public void setRequired(final Boolean required) {
		this.required = required;
	}

	public Boolean getActive() {
		return active;
	}

	public void setActive(final Boolean active) {
		this.active = active;
	}

	/** To-one relationship, resolved on first access. */
	public Keyword getKeyword() {
		if (keyword__resolvedKey == null || !keyword__resolvedKey.equals(keyword_id)) {
			if (daoSession == null) {
				throw new DaoException("Entity is detached from DAO context");
			}
			final KeywordDao targetDao = daoSession.getKeywordDao();
			keyword = targetDao.load(keyword_id);
			keyword__resolvedKey = keyword_id;
		}
		return keyword;
	}

	public void setKeyword(final Keyword keyword) {
		this.keyword = keyword;
		keyword_id = keyword == null ? null : keyword.getId();
		keyword__resolvedKey = keyword_id;
	}

	/**
	 * To-many relationship, resolved on first access (and after reset). Changes
	 * to to-many relations are not persisted, make changes to the target
	 * entity.
	 */
	public synchronized List<Question> getQuestionList() {
		if (questionList == null) {
			if (daoSession == null) {
				throw new DaoException("Entity is detached from DAO context");
			}
			final QuestionDao targetDao = daoSession.getQuestionDao();
			questionList = targetDao._queryQuestion_QuestionList(id);
		}
		return questionList;
	}

	/**
	 * Resets a to-many relationship, making the next get call to query for a
	 * fresh result.
	 */
	public synchronized void resetQuestionList() {
		questionList = null;
	}

	/**
	 * Convenient call for {@link AbstractDao#delete(Object)}. Entity must
	 * attached to an entity context.
	 */
	public void delete() {
		if (myDao == null) {
			throw new DaoException("Entity is detached from DAO context");
		}
		myDao.delete(this);
	}

	/**
	 * Convenient call for {@link AbstractDao#update(Object)}. Entity must
	 * attached to an entity context.
	 */
	public void update() {
		if (myDao == null) {
			throw new DaoException("Entity is detached from DAO context");
		}
		myDao.update(this);
	}

	/**
	 * Convenient call for {@link AbstractDao#refresh(Object)}. Entity must
	 * attached to an entity context.
	 */
	public void refresh() {
		if (myDao == null) {
			throw new DaoException("Entity is detached from DAO context");
		}
		myDao.refresh(this);
	}

}
