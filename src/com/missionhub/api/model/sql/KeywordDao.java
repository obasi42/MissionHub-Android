package com.missionhub.api.model.sql;

import java.util.List;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.Query;
import de.greenrobot.dao.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table KEYWORD.
 */
public class KeywordDao extends AbstractDao<Keyword, Long> {

	public static final String TABLENAME = "KEYWORD";

	public static class Properties {
		public final static Property Id = new Property(0, Long.class, "id", true, "_id");
		public final static Property Organization_id = new Property(1, Long.class, "organization_id", false, "ORGANIZATION_ID");
		public final static Property Keyword = new Property(2, String.class, "keyword", false, "KEYWORD");
		public final static Property State = new Property(3, String.class, "state", false, "STATE");
	};

	private DaoSession daoSession;

	private Query<Keyword> organization_KeywordListQuery;

	public KeywordDao(final DaoConfig config) {
		super(config);
	}

	public KeywordDao(final DaoConfig config, final DaoSession daoSession) {
		super(config, daoSession);
		this.daoSession = daoSession;
	}

	/** Creates the underlying database table. */
	public static void createTable(final SQLiteDatabase db, final boolean ifNotExists) {
		final String sql = "CREATE TABLE " + (ifNotExists ? "IF NOT EXISTS " : "") + "'KEYWORD' (" + //
				"'_id' INTEGER PRIMARY KEY ," + // 0: id
				"'ORGANIZATION_ID' INTEGER," + // 1: organization_id
				"'KEYWORD' TEXT," + // 2: keyword
				"'STATE' TEXT);"; // 3: state
		db.execSQL(sql);
	}

	/** Drops the underlying database table. */
	public static void dropTable(final SQLiteDatabase db, final boolean ifExists) {
		final String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'KEYWORD'";
		db.execSQL(sql);
	}

	/** @inheritdoc */
	@Override
	protected void bindValues(final SQLiteStatement stmt, final Keyword entity) {
		stmt.clearBindings();

		final Long id = entity.getId();
		if (id != null) {
			stmt.bindLong(1, id);
		}

		final Long organization_id = entity.getOrganization_id();
		if (organization_id != null) {
			stmt.bindLong(2, organization_id);
		}

		final String keyword = entity.getKeyword();
		if (keyword != null) {
			stmt.bindString(3, keyword);
		}

		final String state = entity.getState();
		if (state != null) {
			stmt.bindString(4, state);
		}
	}

	@Override
	protected void attachEntity(final Keyword entity) {
		super.attachEntity(entity);
		entity.__setDaoSession(daoSession);
	}

	/** @inheritdoc */
	@Override
	public Long readKey(final Cursor cursor, final int offset) {
		return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
	}

	/** @inheritdoc */
	@Override
	public Keyword readEntity(final Cursor cursor, final int offset) {
		final Keyword entity = new Keyword( //
				cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
				cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // organization_id
				cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // keyword
				cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // state
		);
		return entity;
	}

	/** @inheritdoc */
	@Override
	public void readEntity(final Cursor cursor, final Keyword entity, final int offset) {
		entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
		entity.setOrganization_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
		entity.setKeyword(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
		entity.setState(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
	}

	@Override
	protected Long updateKeyAfterInsert(final Keyword entity, final long rowId) {
		entity.setId(rowId);
		return rowId;
	}

	/** @inheritdoc */
	@Override
	public Long getKey(final Keyword entity) {
		if (entity != null) {
			return entity.getId();
		} else {
			return null;
		}
	}

	/** @inheritdoc */
	@Override
	protected boolean isEntityUpdateable() {
		return true;
	}

	/**
	 * Internal query to resolve the "keywordList" to-many relationship of
	 * Organization.
	 */
	public synchronized List<Keyword> _queryOrganization_KeywordList(final Long organization_id) {
		if (organization_KeywordListQuery == null) {
			final QueryBuilder<Keyword> queryBuilder = queryBuilder();
			queryBuilder.where(Properties.Organization_id.eq(organization_id));
			organization_KeywordListQuery = queryBuilder.build();
		} else {
			organization_KeywordListQuery.setParameter(0, organization_id);
		}
		return organization_KeywordListQuery.list();
	}

}
