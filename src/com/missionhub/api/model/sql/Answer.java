package com.missionhub.api.model.sql;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table ANSWER.
 */
public class Answer {

	private Long id;
	private Long person_id;
	private Long organization_id;
	private Long question_id;
	private String answer;

	/** Used to resolve relations */
	private DaoSession daoSession;

	/** Used for active entity operations. */
	private AnswerDao myDao;

	private Question question;
	private Long question__resolvedKey;

	public Answer() {}

	public Answer(final Long id) {
		this.id = id;
	}

	public Answer(final Long id, final Long person_id, final Long organization_id, final Long question_id, final String answer) {
		this.id = id;
		this.person_id = person_id;
		this.organization_id = organization_id;
		this.question_id = question_id;
		this.answer = answer;
	}

	/** called by internal mechanisms, do not call yourself. */
	public void __setDaoSession(final DaoSession daoSession) {
		this.daoSession = daoSession;
		myDao = daoSession != null ? daoSession.getAnswerDao() : null;
	}

	public Long getId() {
		return id;
	}

	public void setId(final Long id) {
		this.id = id;
	}

	public Long getPerson_id() {
		return person_id;
	}

	public void setPerson_id(final Long person_id) {
		this.person_id = person_id;
	}

	public Long getOrganization_id() {
		return organization_id;
	}

	public void setOrganization_id(final Long organization_id) {
		this.organization_id = organization_id;
	}

	public Long getQuestion_id() {
		return question_id;
	}

	public void setQuestion_id(final Long question_id) {
		this.question_id = question_id;
	}

	public String getAnswer() {
		return answer;
	}

	public void setAnswer(final String answer) {
		this.answer = answer;
	}

	/** To-one relationship, resolved on first access. */
	public Question getQuestion() {
		if (question__resolvedKey == null || !question__resolvedKey.equals(question_id)) {
			if (daoSession == null) {
				throw new DaoException("Entity is detached from DAO context");
			}
			final QuestionDao targetDao = daoSession.getQuestionDao();
			question = targetDao.load(question_id);
			question__resolvedKey = question_id;
		}
		return question;
	}

	public void setQuestion(final Question question) {
		this.question = question;
		question_id = question == null ? null : question.getId();
		question__resolvedKey = question_id;
	}

	/**
	 * Convenient call for {@link AbstractDao#delete(Object)}. Entity must
	 * attached to an entity context.
	 */
	public void delete() {
		if (myDao == null) {
			throw new DaoException("Entity is detached from DAO context");
		}
		myDao.delete(this);
	}

	/**
	 * Convenient call for {@link AbstractDao#update(Object)}. Entity must
	 * attached to an entity context.
	 */
	public void update() {
		if (myDao == null) {
			throw new DaoException("Entity is detached from DAO context");
		}
		myDao.update(this);
	}

	/**
	 * Convenient call for {@link AbstractDao#refresh(Object)}. Entity must
	 * attached to an entity context.
	 */
	public void refresh() {
		if (myDao == null) {
			throw new DaoException("Entity is detached from DAO context");
		}
		myDao.refresh(this);
	}

}
