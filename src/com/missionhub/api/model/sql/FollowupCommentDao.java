package com.missionhub.api.model.sql;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.Query;
import de.greenrobot.dao.QueryBuilder;

import com.missionhub.api.model.sql.FollowupComment;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table FOLLOWUP_COMMENT (schema version 1).
*/
public class FollowupCommentDao extends AbstractDao<FollowupComment, Integer> {

    public static final String TABLENAME = "FOLLOWUP_COMMENT";

    public static class Properties {
        public final static Property _id = new Property(0, Integer.class, "_id", true, "_ID");
        public final static Property Contact_id = new Property(1, Integer.class, "contact_id", false, "CONTACT_ID");
        public final static Property Commenter_id = new Property(2, Integer.class, "commenter_id", false, "COMMENTER_ID");
        public final static Property Comment = new Property(3, String.class, "comment", false, "COMMENT");
        public final static Property Status = new Property(4, String.class, "status", false, "STATUS");
        public final static Property Created_at = new Property(5, java.util.Date.class, "created_at", false, "CREATED_AT");
    };

    private DaoSession daoSession;

    private Query<FollowupComment> person_Followup_commentsQuery;
    private Query<FollowupComment> person_Posted_commentsQuery;

    public FollowupCommentDao(DaoConfig config) {
        super(config);
    }
    
    public FollowupCommentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String sql = "CREATE TABLE " + (ifNotExists? "IF NOT EXISTS ": "") + "'FOLLOWUP_COMMENT' (" + //
                "'_ID' INTEGER PRIMARY KEY ," + // 0: _id
                "'CONTACT_ID' INTEGER," + // 1: contact_id
                "'COMMENTER_ID' INTEGER," + // 2: commenter_id
                "'COMMENT' TEXT," + // 3: comment
                "'STATUS' TEXT," + // 4: status
                "'CREATED_AT' INTEGER);"; // 5: created_at
        db.execSQL(sql);
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FOLLOWUP_COMMENT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, FollowupComment entity) {
        stmt.clearBindings();
 
        Integer _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        Integer contact_id = entity.getContact_id();
        if (contact_id != null) {
            stmt.bindLong(2, contact_id);
        }
 
        Integer commenter_id = entity.getCommenter_id();
        if (commenter_id != null) {
            stmt.bindLong(3, commenter_id);
        }
 
        String comment = entity.getComment();
        if (comment != null) {
            stmt.bindString(4, comment);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(5, status);
        }
 
        java.util.Date created_at = entity.getCreated_at();
        if (created_at != null) {
            stmt.bindLong(6, created_at.getTime());
        }
    }

    @Override
    protected void attachEntity(FollowupComment entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public FollowupComment readEntity(Cursor cursor, int offset) {
        FollowupComment entity = new FollowupComment( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // contact_id
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // commenter_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // comment
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // status
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)) // created_at
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, FollowupComment entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setContact_id(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setCommenter_id(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setComment(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStatus(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCreated_at(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
     }
    
    @Override
    protected Integer updateKeyAfterInsert(FollowupComment entity, long rowId) {
        // TODO XXX Only Long PKs are supported currently
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Integer getKey(FollowupComment entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "followup_comments" to-many relationship of Person. */
    public synchronized List<FollowupComment> _queryPerson_Followup_comments(Integer contact_id) {
        if (person_Followup_commentsQuery == null) {
            QueryBuilder<FollowupComment> queryBuilder = queryBuilder();
            queryBuilder.where(Properties.Contact_id.eq(contact_id));
            person_Followup_commentsQuery = queryBuilder.build();
        } else {
            person_Followup_commentsQuery.setParameter(0, contact_id);
        }
        return person_Followup_commentsQuery.list();
    }

    /** Internal query to resolve the "posted_comments" to-many relationship of Person. */
    public synchronized List<FollowupComment> _queryPerson_Posted_comments(Integer commenter_id) {
        if (person_Posted_commentsQuery == null) {
            QueryBuilder<FollowupComment> queryBuilder = queryBuilder();
            queryBuilder.where(Properties.Commenter_id.eq(commenter_id));
            person_Posted_commentsQuery = queryBuilder.build();
        } else {
            person_Posted_commentsQuery.setParameter(0, commenter_id);
        }
        return person_Posted_commentsQuery.list();
    }

}
