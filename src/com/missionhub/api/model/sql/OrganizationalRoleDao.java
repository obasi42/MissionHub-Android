package com.missionhub.api.model.sql;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.Query;
import de.greenrobot.dao.QueryBuilder;

import com.missionhub.api.model.sql.OrganizationalRole;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ORGANIZATIONAL_ROLE.
*/
public class OrganizationalRoleDao extends AbstractDao<OrganizationalRole, Long> {

    public static final String TABLENAME = "ORGANIZATIONAL_ROLE";

    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Person_id = new Property(1, Long.class, "person_id", false, "PERSON_ID");
        public final static Property Org_id = new Property(2, Long.class, "org_id", false, "ORG_ID");
        public final static Property Role = new Property(3, String.class, "role", false, "ROLE");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property Primary = new Property(5, Boolean.class, "primary", false, "PRIMARY");
    };

    private Query<OrganizationalRole> person_OrganizationalRoleListQuery;

    public OrganizationalRoleDao(DaoConfig config) {
        super(config);
    }
    
    public OrganizationalRoleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String sql = "CREATE TABLE " + (ifNotExists? "IF NOT EXISTS ": "") + "'ORGANIZATIONAL_ROLE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'PERSON_ID' INTEGER," + // 1: person_id
                "'ORG_ID' INTEGER," + // 2: org_id
                "'ROLE' TEXT," + // 3: role
                "'NAME' TEXT," + // 4: name
                "'PRIMARY' INTEGER);"; // 5: primary
        db.execSQL(sql);
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ORGANIZATIONAL_ROLE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, OrganizationalRole entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long person_id = entity.getPerson_id();
        if (person_id != null) {
            stmt.bindLong(2, person_id);
        }
 
        Long org_id = entity.getOrg_id();
        if (org_id != null) {
            stmt.bindLong(3, org_id);
        }
 
        String role = entity.getRole();
        if (role != null) {
            stmt.bindString(4, role);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        Boolean primary = entity.getPrimary();
        if (primary != null) {
            stmt.bindLong(6, primary ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public OrganizationalRole readEntity(Cursor cursor, int offset) {
        OrganizationalRole entity = new OrganizationalRole( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // person_id
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // org_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // role
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0 // primary
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, OrganizationalRole entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPerson_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setOrg_id(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setRole(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPrimary(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
     }
    
    @Override
    protected Long updateKeyAfterInsert(OrganizationalRole entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(OrganizationalRole entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "organizationalRoleList" to-many relationship of Person. */
    public synchronized List<OrganizationalRole> _queryPerson_OrganizationalRoleList(Long person_id) {
        if (person_OrganizationalRoleListQuery == null) {
            QueryBuilder<OrganizationalRole> queryBuilder = queryBuilder();
            queryBuilder.where(Properties.Person_id.eq(person_id));
            person_OrganizationalRoleListQuery = queryBuilder.build();
        } else {
            person_OrganizationalRoleListQuery.setParameter(0, person_id);
        }
        return person_OrganizationalRoleListQuery.list();
    }

}
