package com.missionhub.api.model.sql;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.Query;
import de.greenrobot.dao.QueryBuilder;

import com.missionhub.api.model.sql.Question;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table QUESTION (schema version 1).
*/
public class QuestionDao extends AbstractDao<Question, Integer> {

    public static final String TABLENAME = "QUESTION";

    public static class Properties {
        public final static Property _id = new Property(0, Integer.class, "_id", true, "_ID");
        public final static Property Label = new Property(1, String.class, "label", false, "LABEL");
        public final static Property Kind = new Property(2, String.class, "kind", false, "KIND");
        public final static Property Style = new Property(3, String.class, "style", false, "STYLE");
        public final static Property Required = new Property(4, Boolean.class, "required", false, "REQUIRED");
        public final static Property Active = new Property(5, Boolean.class, "active", false, "ACTIVE");
        public final static Property Question_id = new Property(6, Integer.class, "question_id", false, "QUESTION_ID");
    };

    private DaoSession daoSession;

    private Query<Question> question_QuestionQuery;

    public QuestionDao(DaoConfig config) {
        super(config);
    }
    
    public QuestionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String sql = "CREATE TABLE " + (ifNotExists? "IF NOT EXISTS ": "") + "'QUESTION' (" + //
                "'_ID' INTEGER PRIMARY KEY ," + // 0: _id
                "'LABEL' TEXT," + // 1: label
                "'KIND' TEXT," + // 2: kind
                "'STYLE' TEXT," + // 3: style
                "'REQUIRED' INTEGER," + // 4: required
                "'ACTIVE' INTEGER," + // 5: active
                "'QUESTION_ID' INTEGER);"; // 6: question_id
        db.execSQL(sql);
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'QUESTION'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Question entity) {
        stmt.clearBindings();
 
        Integer _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String label = entity.getLabel();
        if (label != null) {
            stmt.bindString(2, label);
        }
 
        String kind = entity.getKind();
        if (kind != null) {
            stmt.bindString(3, kind);
        }
 
        String style = entity.getStyle();
        if (style != null) {
            stmt.bindString(4, style);
        }
 
        Boolean required = entity.getRequired();
        if (required != null) {
            stmt.bindLong(5, required ? 1l: 0l);
        }
 
        Boolean active = entity.getActive();
        if (active != null) {
            stmt.bindLong(6, active ? 1l: 0l);
        }
    }

    @Override
    protected void attachEntity(Question entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Question readEntity(Cursor cursor, int offset) {
        Question entity = new Question( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // label
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // kind
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // style
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // required
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0 // active
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Question entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setLabel(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setKind(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStyle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRequired(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setActive(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
     }
    
    @Override
    protected Integer updateKeyAfterInsert(Question entity, long rowId) {
        // TODO XXX Only Long PKs are supported currently
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Integer getKey(Question entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "question" to-many relationship of Question. */
    public synchronized List<Question> _queryQuestion_Question(Integer question_id) {
        if (question_QuestionQuery == null) {
            QueryBuilder<Question> queryBuilder = queryBuilder();
            queryBuilder.where(Properties.Question_id.eq(question_id));
            question_QuestionQuery = queryBuilder.build();
        } else {
            question_QuestionQuery.setParameter(0, question_id);
        }
        return question_QuestionQuery.list();
    }

}
