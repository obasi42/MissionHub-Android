package com.missionhub.model;

import java.util.List;
import com.missionhub.model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table FOLLOWUP_COMMENT.
 */
public class FollowupComment {

    private Long id;
    private Long contact_id;
    private Long commenter_id;
    private Long organization_id;
    private String comment;
    private String status;
    private java.util.Date updated_at;
    private java.util.Date created_at;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient FollowupCommentDao myDao;

    private Person contact;
    private Long contact__resolvedKey;

    private Person commenter;
    private Long commenter__resolvedKey;

    private Organization organization;
    private Long organization__resolvedKey;

    private List<Rejoicable> rejoicables;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public FollowupComment() {
    }

    public FollowupComment(Long id) {
        this.id = id;
    }

    public FollowupComment(Long id, Long contact_id, Long commenter_id, Long organization_id, String comment, String status, java.util.Date updated_at, java.util.Date created_at) {
        this.id = id;
        this.contact_id = contact_id;
        this.commenter_id = commenter_id;
        this.organization_id = organization_id;
        this.comment = comment;
        this.status = status;
        this.updated_at = updated_at;
        this.created_at = created_at;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getFollowupCommentDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getContact_id() {
        return contact_id;
    }

    public void setContact_id(Long contact_id) {
        this.contact_id = contact_id;
    }

    public Long getCommenter_id() {
        return commenter_id;
    }

    public void setCommenter_id(Long commenter_id) {
        this.commenter_id = commenter_id;
    }

    public Long getOrganization_id() {
        return organization_id;
    }

    public void setOrganization_id(Long organization_id) {
        this.organization_id = organization_id;
    }

    public String getComment() {
        return comment;
    }

    public void setComment(String comment) {
        this.comment = comment;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public java.util.Date getUpdated_at() {
        return updated_at;
    }

    public void setUpdated_at(java.util.Date updated_at) {
        this.updated_at = updated_at;
    }

    public java.util.Date getCreated_at() {
        return created_at;
    }

    public void setCreated_at(java.util.Date created_at) {
        this.created_at = created_at;
    }

    /** To-one relationship, resolved on first access. */
    public Person getContact() {
        if (contact__resolvedKey == null || !contact__resolvedKey.equals(contact_id)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PersonDao targetDao = daoSession.getPersonDao();
            contact = targetDao.load(contact_id);
            contact__resolvedKey = contact_id;
        }
        return contact;
    }

    public void setContact(Person contact) {
        this.contact = contact;
        contact_id = contact == null ? null : contact.getId();
        contact__resolvedKey = contact_id;
    }

    /** To-one relationship, resolved on first access. */
    public Person getCommenter() {
        if (commenter__resolvedKey == null || !commenter__resolvedKey.equals(commenter_id)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PersonDao targetDao = daoSession.getPersonDao();
            commenter = targetDao.load(commenter_id);
            commenter__resolvedKey = commenter_id;
        }
        return commenter;
    }

    public void setCommenter(Person commenter) {
        this.commenter = commenter;
        commenter_id = commenter == null ? null : commenter.getId();
        commenter__resolvedKey = commenter_id;
    }

    /** To-one relationship, resolved on first access. */
    public Organization getOrganization() {
        if (organization__resolvedKey == null || !organization__resolvedKey.equals(organization_id)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            OrganizationDao targetDao = daoSession.getOrganizationDao();
            organization = targetDao.load(organization_id);
            organization__resolvedKey = organization_id;
        }
        return organization;
    }

    public void setOrganization(Organization organization) {
        this.organization = organization;
        organization_id = organization == null ? null : organization.getId();
        organization__resolvedKey = organization_id;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public synchronized List<Rejoicable> getRejoicables() {
        if (rejoicables == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RejoicableDao targetDao = daoSession.getRejoicableDao();
            rejoicables = targetDao._queryFollowupComment_Rejoicables(id);
        }
        return rejoicables;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetRejoicables() {
        rejoicables = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here

	public void deleteWithRelations() {
		if (daoSession == null) {
			throw new DaoException("Entity is detached from DAO context");
		}
		daoSession.getRejoicableDao().queryBuilder().where(RejoicableDao.Properties.Followup_comment_id.eq(getId())).buildDelete().executeDeleteWithoutDetachingEntities();
		delete();
	}
    // KEEP METHODS END

}
