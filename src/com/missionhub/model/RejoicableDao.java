package com.missionhub.model;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.Query;
import de.greenrobot.dao.QueryBuilder;

import com.missionhub.model.Rejoicable;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table REJOICABLE.
*/
public class RejoicableDao extends AbstractDao<Rejoicable, Long> {

    public static final String TABLENAME = "REJOICABLE";

    /**
     * Properties of entity Rejoicable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Comment_id = new Property(1, Long.class, "comment_id", false, "COMMENT_ID");
        public final static Property What = new Property(2, String.class, "what", false, "WHAT");
    };

    private Query<Rejoicable> followupComment_RejoicablesQuery;

    public RejoicableDao(DaoConfig config) {
        super(config);
    }
    
    public RejoicableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'REJOICABLE' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'COMMENT_ID' INTEGER," + // 1: comment_id
                "'WHAT' TEXT);"); // 2: what
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'REJOICABLE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Rejoicable entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long comment_id = entity.getComment_id();
        if (comment_id != null) {
            stmt.bindLong(2, comment_id);
        }
 
        String what = entity.getWhat();
        if (what != null) {
            stmt.bindString(3, what);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Rejoicable readEntity(Cursor cursor, int offset) {
        Rejoicable entity = new Rejoicable( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // comment_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // what
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Rejoicable entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setComment_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setWhat(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Rejoicable entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Rejoicable entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "rejoicables" to-many relationship of FollowupComment. */
    public synchronized List<Rejoicable> _queryFollowupComment_Rejoicables(Long comment_id) {
        if (followupComment_RejoicablesQuery == null) {
            QueryBuilder<Rejoicable> queryBuilder = queryBuilder();
            queryBuilder.where(Properties.Comment_id.eq(comment_id));
            followupComment_RejoicablesQuery = queryBuilder.build();
        } else {
            followupComment_RejoicablesQuery.setParameter(0, comment_id);
        }
        return followupComment_RejoicablesQuery.list();
    }

}
