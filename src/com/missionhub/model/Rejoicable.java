package com.missionhub.model;

import com.missionhub.model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table REJOICABLE.
 */
public class Rejoicable {

    private Long id;
    private String what;
    private Long person_id;
    private Long created_by_id;
    private Long followup_comment_id;
    private Long organization_id;
    private java.util.Date updated_at;
    private java.util.Date created_at;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient RejoicableDao myDao;

    private Person person;
    private Long person__resolvedKey;

    private PhoneNumber phoneNumber;
    private Long phoneNumber__resolvedKey;

    private FollowupComment followupComment;
    private Long followupComment__resolvedKey;

    private Organization organization;
    private Long organization__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Rejoicable() {
    }

    public Rejoicable(Long id) {
        this.id = id;
    }

    public Rejoicable(Long id, String what, Long person_id, Long created_by_id, Long followup_comment_id, Long organization_id, java.util.Date updated_at, java.util.Date created_at) {
        this.id = id;
        this.what = what;
        this.person_id = person_id;
        this.created_by_id = created_by_id;
        this.followup_comment_id = followup_comment_id;
        this.organization_id = organization_id;
        this.updated_at = updated_at;
        this.created_at = created_at;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getRejoicableDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getWhat() {
        return what;
    }

    public void setWhat(String what) {
        this.what = what;
    }

    public Long getPerson_id() {
        return person_id;
    }

    public void setPerson_id(Long person_id) {
        this.person_id = person_id;
    }

    public Long getCreated_by_id() {
        return created_by_id;
    }

    public void setCreated_by_id(Long created_by_id) {
        this.created_by_id = created_by_id;
    }

    public Long getFollowup_comment_id() {
        return followup_comment_id;
    }

    public void setFollowup_comment_id(Long followup_comment_id) {
        this.followup_comment_id = followup_comment_id;
    }

    public Long getOrganization_id() {
        return organization_id;
    }

    public void setOrganization_id(Long organization_id) {
        this.organization_id = organization_id;
    }

    public java.util.Date getUpdated_at() {
        return updated_at;
    }

    public void setUpdated_at(java.util.Date updated_at) {
        this.updated_at = updated_at;
    }

    public java.util.Date getCreated_at() {
        return created_at;
    }

    public void setCreated_at(java.util.Date created_at) {
        this.created_at = created_at;
    }

    /** To-one relationship, resolved on first access. */
    public Person getPerson() {
        if (person__resolvedKey == null || !person__resolvedKey.equals(person_id)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PersonDao targetDao = daoSession.getPersonDao();
            person = targetDao.load(person_id);
            person__resolvedKey = person_id;
        }
        return person;
    }

    public void setPerson(Person person) {
        this.person = person;
        person_id = person == null ? null : person.getId();
        person__resolvedKey = person_id;
    }

    /** To-one relationship, resolved on first access. */
    public PhoneNumber getPhoneNumber() {
        if (phoneNumber__resolvedKey == null || !phoneNumber__resolvedKey.equals(created_by_id)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PhoneNumberDao targetDao = daoSession.getPhoneNumberDao();
            phoneNumber = targetDao.load(created_by_id);
            phoneNumber__resolvedKey = created_by_id;
        }
        return phoneNumber;
    }

    public void setPhoneNumber(PhoneNumber phoneNumber) {
        this.phoneNumber = phoneNumber;
        created_by_id = phoneNumber == null ? null : phoneNumber.getId();
        phoneNumber__resolvedKey = created_by_id;
    }

    /** To-one relationship, resolved on first access. */
    public FollowupComment getFollowupComment() {
        if (followupComment__resolvedKey == null || !followupComment__resolvedKey.equals(followup_comment_id)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            FollowupCommentDao targetDao = daoSession.getFollowupCommentDao();
            followupComment = targetDao.load(followup_comment_id);
            followupComment__resolvedKey = followup_comment_id;
        }
        return followupComment;
    }

    public void setFollowupComment(FollowupComment followupComment) {
        this.followupComment = followupComment;
        followup_comment_id = followupComment == null ? null : followupComment.getId();
        followupComment__resolvedKey = followup_comment_id;
    }

    /** To-one relationship, resolved on first access. */
    public Organization getOrganization() {
        if (organization__resolvedKey == null || !organization__resolvedKey.equals(organization_id)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            OrganizationDao targetDao = daoSession.getOrganizationDao();
            organization = targetDao.load(organization_id);
            organization__resolvedKey = organization_id;
        }
        return organization;
    }

    public void setOrganization(Organization organization) {
        this.organization = organization;
        organization_id = organization == null ? null : organization.getId();
        organization__resolvedKey = organization_id;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
