package com.missionhub.model;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table GROUP_MEMBERSHIP.
 */
public class GroupMembership {

	private Long id;
	private Long person_id;
	private Long group_id;
	private String name;
	private String role;

	/** Used to resolve relations */
	private transient DaoSession daoSession;

	/** Used for active entity operations. */
	private transient GroupMembershipDao myDao;

	private Person person;
	private Long person__resolvedKey;

	private Group group;
	private Long group__resolvedKey;

	public GroupMembership() {}

	public GroupMembership(final Long id) {
		this.id = id;
	}

	public GroupMembership(final Long id, final Long person_id, final Long group_id, final String name, final String role) {
		this.id = id;
		this.person_id = person_id;
		this.group_id = group_id;
		this.name = name;
		this.role = role;
	}

	/** called by internal mechanisms, do not call yourself. */
	public void __setDaoSession(final DaoSession daoSession) {
		this.daoSession = daoSession;
		myDao = daoSession != null ? daoSession.getGroupMembershipDao() : null;
	}

	public Long getId() {
		return id;
	}

	public void setId(final Long id) {
		this.id = id;
	}

	public Long getPerson_id() {
		return person_id;
	}

	public void setPerson_id(final Long person_id) {
		this.person_id = person_id;
	}

	public Long getGroup_id() {
		return group_id;
	}

	public void setGroup_id(final Long group_id) {
		this.group_id = group_id;
	}

	public String getName() {
		return name;
	}

	public void setName(final String name) {
		this.name = name;
	}

	public String getRole() {
		return role;
	}

	public void setRole(final String role) {
		this.role = role;
	}

	/** To-one relationship, resolved on first access. */
	public Person getPerson() {
		if (person__resolvedKey == null || !person__resolvedKey.equals(person_id)) {
			if (daoSession == null) {
				throw new DaoException("Entity is detached from DAO context");
			}
			final PersonDao targetDao = daoSession.getPersonDao();
			person = targetDao.load(person_id);
			person__resolvedKey = person_id;
		}
		return person;
	}

	public void setPerson(final Person person) {
		this.person = person;
		person_id = person == null ? null : person.getId();
		person__resolvedKey = person_id;
	}

	/** To-one relationship, resolved on first access. */
	public Group getGroup() {
		if (group__resolvedKey == null || !group__resolvedKey.equals(group_id)) {
			if (daoSession == null) {
				throw new DaoException("Entity is detached from DAO context");
			}
			final GroupDao targetDao = daoSession.getGroupDao();
			group = targetDao.load(group_id);
			group__resolvedKey = group_id;
		}
		return group;
	}

	public void setGroup(final Group group) {
		this.group = group;
		group_id = group == null ? null : group.getId();
		group__resolvedKey = group_id;
	}

	/** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
	public void delete() {
		if (myDao == null) {
			throw new DaoException("Entity is detached from DAO context");
		}
		myDao.delete(this);
	}

	/** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
	public void update() {
		if (myDao == null) {
			throw new DaoException("Entity is detached from DAO context");
		}
		myDao.update(this);
	}

	/** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
	public void refresh() {
		if (myDao == null) {
			throw new DaoException("Entity is detached from DAO context");
		}
		myDao.refresh(this);
	}

}
