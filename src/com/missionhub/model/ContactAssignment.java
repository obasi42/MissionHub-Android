package com.missionhub.model;

import com.missionhub.model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table CONTACT_ASSIGNMENT.
 */
public class ContactAssignment {

    private Long id;
    private Long person_id;
    private Long assigned_to_id;
    private Long organization_id;
    private java.util.Date updated_at;
    private java.util.Date created_at;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ContactAssignmentDao myDao;

    private Person person;
    private Long person__resolvedKey;

    private Person person_assigned_to;
    private Long person_assigned_to__resolvedKey;

    private Organization organization;
    private Long organization__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public ContactAssignment() {
    }

    public ContactAssignment(Long id) {
        this.id = id;
    }

    public ContactAssignment(Long id, Long person_id, Long assigned_to_id, Long organization_id, java.util.Date updated_at, java.util.Date created_at) {
        this.id = id;
        this.person_id = person_id;
        this.assigned_to_id = assigned_to_id;
        this.organization_id = organization_id;
        this.updated_at = updated_at;
        this.created_at = created_at;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getContactAssignmentDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getPerson_id() {
        return person_id;
    }

    public void setPerson_id(Long person_id) {
        this.person_id = person_id;
    }

    public Long getAssigned_to_id() {
        return assigned_to_id;
    }

    public void setAssigned_to_id(Long assigned_to_id) {
        this.assigned_to_id = assigned_to_id;
    }

    public Long getOrganization_id() {
        return organization_id;
    }

    public void setOrganization_id(Long organization_id) {
        this.organization_id = organization_id;
    }

    public java.util.Date getUpdated_at() {
        return updated_at;
    }

    public void setUpdated_at(java.util.Date updated_at) {
        this.updated_at = updated_at;
    }

    public java.util.Date getCreated_at() {
        return created_at;
    }

    public void setCreated_at(java.util.Date created_at) {
        this.created_at = created_at;
    }

    /** To-one relationship, resolved on first access. */
    public Person getPerson() {
        if (person__resolvedKey == null || !person__resolvedKey.equals(person_id)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PersonDao targetDao = daoSession.getPersonDao();
            person = targetDao.load(person_id);
            person__resolvedKey = person_id;
        }
        return person;
    }

    public void setPerson(Person person) {
        this.person = person;
        person_id = person == null ? null : person.getId();
        person__resolvedKey = person_id;
    }

    /** To-one relationship, resolved on first access. */
    public Person getPerson_assigned_to() {
        if (person_assigned_to__resolvedKey == null || !person_assigned_to__resolvedKey.equals(assigned_to_id)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PersonDao targetDao = daoSession.getPersonDao();
            person_assigned_to = targetDao.load(assigned_to_id);
            person_assigned_to__resolvedKey = assigned_to_id;
        }
        return person_assigned_to;
    }

    public void setPerson_assigned_to(Person person_assigned_to) {
        this.person_assigned_to = person_assigned_to;
        assigned_to_id = person_assigned_to == null ? null : person_assigned_to.getId();
        person_assigned_to__resolvedKey = assigned_to_id;
    }

    /** To-one relationship, resolved on first access. */
    public Organization getOrganization() {
        if (organization__resolvedKey == null || !organization__resolvedKey.equals(organization_id)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            OrganizationDao targetDao = daoSession.getOrganizationDao();
            organization = targetDao.load(organization_id);
            organization__resolvedKey = organization_id;
        }
        return organization;
    }

    public void setOrganization(Organization organization) {
        this.organization = organization;
        organization_id = organization == null ? null : organization.getId();
        organization__resolvedKey = organization_id;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
