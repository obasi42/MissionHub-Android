package com.missionhub.model;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table ORGANIZATIONAL_ROLE.
 */
public class OrganizationalRole {

	private Long id;
	private Long person_id;
	private Long organization_id;
	private String role;
	private Boolean primary;

	/** Used to resolve relations */
	private transient DaoSession daoSession;

	/** Used for active entity operations. */
	private transient OrganizationalRoleDao myDao;

	private Organization organization;
	private Long organization__resolvedKey;

	public OrganizationalRole() {}

	public OrganizationalRole(final Long id) {
		this.id = id;
	}

	public OrganizationalRole(final Long id, final Long person_id, final Long organization_id, final String role, final Boolean primary) {
		this.id = id;
		this.person_id = person_id;
		this.organization_id = organization_id;
		this.role = role;
		this.primary = primary;
	}

	/** called by internal mechanisms, do not call yourself. */
	public void __setDaoSession(final DaoSession daoSession) {
		this.daoSession = daoSession;
		myDao = daoSession != null ? daoSession.getOrganizationalRoleDao() : null;
	}

	public Long getId() {
		return id;
	}

	public void setId(final Long id) {
		this.id = id;
	}

	public Long getPerson_id() {
		return person_id;
	}

	public void setPerson_id(final Long person_id) {
		this.person_id = person_id;
	}

	public Long getOrganization_id() {
		return organization_id;
	}

	public void setOrganization_id(final Long organization_id) {
		this.organization_id = organization_id;
	}

	public String getRole() {
		return role;
	}

	public void setRole(final String role) {
		this.role = role;
	}

	public Boolean getPrimary() {
		return primary;
	}

	public void setPrimary(final Boolean primary) {
		this.primary = primary;
	}

	/** To-one relationship, resolved on first access. */
	public Organization getOrganization() {
		if (organization__resolvedKey == null || !organization__resolvedKey.equals(organization_id)) {
			if (daoSession == null) {
				throw new DaoException("Entity is detached from DAO context");
			}
			final OrganizationDao targetDao = daoSession.getOrganizationDao();
			organization = targetDao.load(organization_id);
			organization__resolvedKey = organization_id;
		}
		return organization;
	}

	public void setOrganization(final Organization organization) {
		this.organization = organization;
		organization_id = organization == null ? null : organization.getId();
		organization__resolvedKey = organization_id;
	}

	/** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
	public void delete() {
		if (myDao == null) {
			throw new DaoException("Entity is detached from DAO context");
		}
		myDao.delete(this);
	}

	/** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
	public void update() {
		if (myDao == null) {
			throw new DaoException("Entity is detached from DAO context");
		}
		myDao.update(this);
	}

	/** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
	public void refresh() {
		if (myDao == null) {
			throw new DaoException("Entity is detached from DAO context");
		}
		myDao.refresh(this);
	}

}
