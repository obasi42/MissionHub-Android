package com.missionhub.model;

import java.util.List;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.Query;
import de.greenrobot.dao.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table ASSIGNMENT.
 */
public class AssignmentDao extends AbstractDao<Assignment, Long> {

	public static final String TABLENAME = "ASSIGNMENT";

	/**
	 * Properties of entity Assignment.<br/>
	 * Can be used for QueryBuilder and for referencing column names.
	 */
	public static class Properties {
		public final static Property Id = new Property(0, Long.class, "id", true, "_id");
		public final static Property Assigned_to_id = new Property(1, Long.class, "assigned_to_id", false, "ASSIGNED_TO_ID");
		public final static Property Person_id = new Property(2, Long.class, "person_id", false, "PERSON_ID");
		public final static Property Organization_id = new Property(3, Long.class, "organization_id", false, "ORGANIZATION_ID");
	};

	private Query<Assignment> person_Assigned_contactsQuery;
	private Query<Assignment> person_Assigned_to_contactsQuery;

	public AssignmentDao(final DaoConfig config) {
		super(config);
	}

	public AssignmentDao(final DaoConfig config, final DaoSession daoSession) {
		super(config, daoSession);
	}

	/** Creates the underlying database table. */
	public static void createTable(final SQLiteDatabase db, final boolean ifNotExists) {
		final String constraint = ifNotExists ? "IF NOT EXISTS " : "";
		db.execSQL("CREATE TABLE " + constraint + "'ASSIGNMENT' (" + //
				"'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
				"'ASSIGNED_TO_ID' INTEGER," + // 1: assigned_to_id
				"'PERSON_ID' INTEGER," + // 2: person_id
				"'ORGANIZATION_ID' INTEGER);"); // 3: organization_id
	}

	/** Drops the underlying database table. */
	public static void dropTable(final SQLiteDatabase db, final boolean ifExists) {
		final String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ASSIGNMENT'";
		db.execSQL(sql);
	}

	/** @inheritdoc */
	@Override
	protected void bindValues(final SQLiteStatement stmt, final Assignment entity) {
		stmt.clearBindings();

		final Long id = entity.getId();
		if (id != null) {
			stmt.bindLong(1, id);
		}

		final Long assigned_to_id = entity.getAssigned_to_id();
		if (assigned_to_id != null) {
			stmt.bindLong(2, assigned_to_id);
		}

		final Long person_id = entity.getPerson_id();
		if (person_id != null) {
			stmt.bindLong(3, person_id);
		}

		final Long organization_id = entity.getOrganization_id();
		if (organization_id != null) {
			stmt.bindLong(4, organization_id);
		}
	}

	/** @inheritdoc */
	@Override
	public Long readKey(final Cursor cursor, final int offset) {
		return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
	}

	/** @inheritdoc */
	@Override
	public Assignment readEntity(final Cursor cursor, final int offset) {
		final Assignment entity = new Assignment( //
				cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
				cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // assigned_to_id
				cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // person_id
				cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3) // organization_id
		);
		return entity;
	}

	/** @inheritdoc */
	@Override
	public void readEntity(final Cursor cursor, final Assignment entity, final int offset) {
		entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
		entity.setAssigned_to_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
		entity.setPerson_id(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
		entity.setOrganization_id(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
	}

	/** @inheritdoc */
	@Override
	protected Long updateKeyAfterInsert(final Assignment entity, final long rowId) {
		entity.setId(rowId);
		return rowId;
	}

	/** @inheritdoc */
	@Override
	public Long getKey(final Assignment entity) {
		if (entity != null) {
			return entity.getId();
		} else {
			return null;
		}
	}

	/** @inheritdoc */
	@Override
	protected boolean isEntityUpdateable() {
		return true;
	}

	/** Internal query to resolve the "assigned_contacts" to-many relationship of Person. */
	public synchronized List<Assignment> _queryPerson_Assigned_contacts(final Long assigned_to_id) {
		if (person_Assigned_contactsQuery == null) {
			final QueryBuilder<Assignment> queryBuilder = queryBuilder();
			queryBuilder.where(Properties.Assigned_to_id.eq(assigned_to_id));
			person_Assigned_contactsQuery = queryBuilder.build();
		} else {
			person_Assigned_contactsQuery.setParameter(0, assigned_to_id);
		}
		return person_Assigned_contactsQuery.list();
	}

	/** Internal query to resolve the "assigned_to_contacts" to-many relationship of Person. */
	public synchronized List<Assignment> _queryPerson_Assigned_to_contacts(final Long person_id) {
		if (person_Assigned_to_contactsQuery == null) {
			final QueryBuilder<Assignment> queryBuilder = queryBuilder();
			queryBuilder.where(Properties.Person_id.eq(person_id));
			person_Assigned_to_contactsQuery = queryBuilder.build();
		} else {
			person_Assigned_to_contactsQuery.setParameter(0, person_id);
		}
		return person_Assigned_to_contactsQuery.list();
	}

}
