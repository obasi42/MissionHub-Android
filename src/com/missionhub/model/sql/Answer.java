package com.missionhub.model.sql;

import com.missionhub.model.sql.DaoSession;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table ANSWER (schema version 1).
 */
public class Answer {

    private Integer _id;
    private Integer person_id;
    private Integer organization_id;
    private Integer question_id;
    private String answer;

    /** Used to resolve relations */
    private DaoSession daoSession;

    /** Used for active entity operations. */
    private AnswerDao myDao;

    private Question question;
    private Integer question__resolvedKey;


    public Answer() {
    }

    public Answer(Integer _id) {
        this._id = _id;
    }

    public Answer(Integer _id, Integer person_id, Integer organization_id, Integer question_id, String answer) {
        this._id = _id;
        this.person_id = person_id;
        this.organization_id = organization_id;
        this.question_id = question_id;
        this.answer = answer;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getAnswerDao() : null;
    }

    public Integer get_id() {
        return _id;
    }

    public void set_id(Integer _id) {
        this._id = _id;
    }

    public Integer getPerson_id() {
        return person_id;
    }

    public void setPerson_id(Integer person_id) {
        this.person_id = person_id;
    }

    public Integer getOrganization_id() {
        return organization_id;
    }

    public void setOrganization_id(Integer organization_id) {
        this.organization_id = organization_id;
    }

    public Integer getQuestion_id() {
        return question_id;
    }

    public void setQuestion_id(Integer question_id) {
        this.question_id = question_id;
    }

    public String getAnswer() {
        return answer;
    }

    public void setAnswer(String answer) {
        this.answer = answer;
    }

    /** To-one relationship, resolved on first access. */
    public Question getQuestion() {
        if (question__resolvedKey == null || !question__resolvedKey.equals(question_id)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            QuestionDao targetDao = daoSession.getQuestionDao();
            question = targetDao.load(question_id);
            question__resolvedKey = question_id;
        }
        return question;
    }

    public void setQuestion(Question question) {
        this.question = question;
        question_id = question == null ? null : question.get_id();
        question__resolvedKey = question_id;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
