package com.missionhub.model;

import java.util.List;
import com.missionhub.model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table QUESTION.
 */
public class Question {

    private Long id;
    private Long keyword_id;
    private String label;
    private String kind;
    private String style;
    private Boolean required;
    private Boolean active;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient QuestionDao myDao;

    private Keyword keyword;
    private Long keyword__resolvedKey;

    private List<QuestionChoice> choices;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Question() {
    }

    public Question(Long id) {
        this.id = id;
    }

    public Question(Long id, Long keyword_id, String label, String kind, String style, Boolean required, Boolean active) {
        this.id = id;
        this.keyword_id = keyword_id;
        this.label = label;
        this.kind = kind;
        this.style = style;
        this.required = required;
        this.active = active;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getQuestionDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getKeyword_id() {
        return keyword_id;
    }

    public void setKeyword_id(Long keyword_id) {
        this.keyword_id = keyword_id;
    }

    public String getLabel() {
        return label;
    }

    public void setLabel(String label) {
        this.label = label;
    }

    public String getKind() {
        return kind;
    }

    public void setKind(String kind) {
        this.kind = kind;
    }

    public String getStyle() {
        return style;
    }

    public void setStyle(String style) {
        this.style = style;
    }

    public Boolean getRequired() {
        return required;
    }

    public void setRequired(Boolean required) {
        this.required = required;
    }

    public Boolean getActive() {
        return active;
    }

    public void setActive(Boolean active) {
        this.active = active;
    }

    /** To-one relationship, resolved on first access. */
    public Keyword getKeyword() {
        if (keyword__resolvedKey == null || !keyword__resolvedKey.equals(keyword_id)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            KeywordDao targetDao = daoSession.getKeywordDao();
            keyword = targetDao.load(keyword_id);
            keyword__resolvedKey = keyword_id;
        }
        return keyword;
    }

    public void setKeyword(Keyword keyword) {
        this.keyword = keyword;
        keyword_id = keyword == null ? null : keyword.getId();
        keyword__resolvedKey = keyword_id;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public synchronized List<QuestionChoice> getChoices() {
        if (choices == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            QuestionChoiceDao targetDao = daoSession.getQuestionChoiceDao();
            choices = targetDao._queryQuestion_Choices(id);
        }
        return choices;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetChoices() {
        choices = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
