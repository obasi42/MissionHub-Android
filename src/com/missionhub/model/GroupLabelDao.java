package com.missionhub.model;

import java.util.ArrayList;
import java.util.List;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.Query;
import de.greenrobot.dao.QueryBuilder;
import de.greenrobot.dao.SqlUtils;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table GROUP_LABEL.
 */
public class GroupLabelDao extends AbstractDao<GroupLabel, Long> {

	public static final String TABLENAME = "GROUP_LABEL";

	/**
	 * Properties of entity GroupLabel.<br/>
	 * Can be used for QueryBuilder and for referencing column names.
	 */
	public static class Properties {
		public final static Property Id = new Property(0, Long.class, "id", true, "_id");
		public final static Property Name = new Property(1, String.class, "name", false, "NAME");
		public final static Property Organization_id = new Property(2, Long.class, "organization_id", false, "ORGANIZATION_ID");
		public final static Property Ancestry = new Property(3, String.class, "ancestry", false, "ANCESTRY");
		public final static Property Created_at = new Property(4, java.util.Date.class, "created_at", false, "CREATED_AT");
		public final static Property Updated_at = new Property(5, java.util.Date.class, "updated_at", false, "UPDATED_AT");
		public final static Property Group_labelings_count = new Property(6, Integer.class, "group_labelings_count", false, "GROUP_LABELINGS_COUNT");
	};

	private DaoSession daoSession;

	private Query<GroupLabel> organization_LabelsQuery;

	public GroupLabelDao(final DaoConfig config) {
		super(config);
	}

	public GroupLabelDao(final DaoConfig config, final DaoSession daoSession) {
		super(config, daoSession);
		this.daoSession = daoSession;
	}

	/** Creates the underlying database table. */
	public static void createTable(final SQLiteDatabase db, final boolean ifNotExists) {
		final String constraint = ifNotExists ? "IF NOT EXISTS " : "";
		db.execSQL("CREATE TABLE " + constraint + "'GROUP_LABEL' (" + //
				"'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
				"'NAME' TEXT," + // 1: name
				"'ORGANIZATION_ID' INTEGER," + // 2: organization_id
				"'ANCESTRY' TEXT," + // 3: ancestry
				"'CREATED_AT' INTEGER," + // 4: created_at
				"'UPDATED_AT' INTEGER," + // 5: updated_at
				"'GROUP_LABELINGS_COUNT' INTEGER);"); // 6: group_labelings_count
	}

	/** Drops the underlying database table. */
	public static void dropTable(final SQLiteDatabase db, final boolean ifExists) {
		final String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GROUP_LABEL'";
		db.execSQL(sql);
	}

	/** @inheritdoc */
	@Override
	protected void bindValues(final SQLiteStatement stmt, final GroupLabel entity) {
		stmt.clearBindings();

		final Long id = entity.getId();
		if (id != null) {
			stmt.bindLong(1, id);
		}

		final String name = entity.getName();
		if (name != null) {
			stmt.bindString(2, name);
		}

		final Long organization_id = entity.getOrganization_id();
		if (organization_id != null) {
			stmt.bindLong(3, organization_id);
		}

		final String ancestry = entity.getAncestry();
		if (ancestry != null) {
			stmt.bindString(4, ancestry);
		}

		final java.util.Date created_at = entity.getCreated_at();
		if (created_at != null) {
			stmt.bindLong(5, created_at.getTime());
		}

		final java.util.Date updated_at = entity.getUpdated_at();
		if (updated_at != null) {
			stmt.bindLong(6, updated_at.getTime());
		}

		final Integer group_labelings_count = entity.getGroup_labelings_count();
		if (group_labelings_count != null) {
			stmt.bindLong(7, group_labelings_count);
		}
	}

	@Override
	protected void attachEntity(final GroupLabel entity) {
		super.attachEntity(entity);
		entity.__setDaoSession(daoSession);
	}

	/** @inheritdoc */
	@Override
	public Long readKey(final Cursor cursor, final int offset) {
		return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
	}

	/** @inheritdoc */
	@Override
	public GroupLabel readEntity(final Cursor cursor, final int offset) {
		final GroupLabel entity = new GroupLabel( //
				cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
				cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
				cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // organization_id
				cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ancestry
				cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // created_at
				cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // updated_at
				cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6) // group_labelings_count
		);
		return entity;
	}

	/** @inheritdoc */
	@Override
	public void readEntity(final Cursor cursor, final GroupLabel entity, final int offset) {
		entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
		entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
		entity.setOrganization_id(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
		entity.setAncestry(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
		entity.setCreated_at(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
		entity.setUpdated_at(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
		entity.setGroup_labelings_count(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
	}

	/** @inheritdoc */
	@Override
	protected Long updateKeyAfterInsert(final GroupLabel entity, final long rowId) {
		entity.setId(rowId);
		return rowId;
	}

	/** @inheritdoc */
	@Override
	public Long getKey(final GroupLabel entity) {
		if (entity != null) {
			return entity.getId();
		} else {
			return null;
		}
	}

	/** @inheritdoc */
	@Override
	protected boolean isEntityUpdateable() {
		return true;
	}

	/** Internal query to resolve the "labels" to-many relationship of Organization. */
	public synchronized List<GroupLabel> _queryOrganization_Labels(final Long organization_id) {
		if (organization_LabelsQuery == null) {
			final QueryBuilder<GroupLabel> queryBuilder = queryBuilder();
			queryBuilder.where(Properties.Organization_id.eq(organization_id));
			organization_LabelsQuery = queryBuilder.build();
		} else {
			organization_LabelsQuery.setParameter(0, organization_id);
		}
		return organization_LabelsQuery.list();
	}

	private String selectDeep;

	protected String getSelectDeep() {
		if (selectDeep == null) {
			final StringBuilder builder = new StringBuilder("SELECT ");
			SqlUtils.appendColumns(builder, "T", getAllColumns());
			builder.append(',');
			SqlUtils.appendColumns(builder, "T0", daoSession.getOrganizationDao().getAllColumns());
			builder.append(" FROM GROUP_LABEL T");
			builder.append(" LEFT JOIN ORGANIZATION T0 ON T.'ORGANIZATION_ID'=T0.'_id'");
			builder.append(' ');
			selectDeep = builder.toString();
		}
		return selectDeep;
	}

	protected GroupLabel loadCurrentDeep(final Cursor cursor, final boolean lock) {
		final GroupLabel entity = loadCurrent(cursor, 0, lock);
		final int offset = getAllColumns().length;

		final Organization organization = loadCurrentOther(daoSession.getOrganizationDao(), cursor, offset);
		entity.setOrganization(organization);

		return entity;
	}

	public GroupLabel loadDeep(final Long key) {
		assertSinglePk();
		if (key == null) {
			return null;
		}

		final StringBuilder builder = new StringBuilder(getSelectDeep());
		builder.append("WHERE ");
		SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
		final String sql = builder.toString();

		final String[] keyArray = new String[] { key.toString() };
		final Cursor cursor = db.rawQuery(sql, keyArray);

		try {
			final boolean available = cursor.moveToFirst();
			if (!available) {
				return null;
			} else if (!cursor.isLast()) {
				throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
			}
			return loadCurrentDeep(cursor, true);
		} finally {
			cursor.close();
		}
	}

	/** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
	public List<GroupLabel> loadAllDeepFromCursor(final Cursor cursor) {
		final int count = cursor.getCount();
		final List<GroupLabel> list = new ArrayList<GroupLabel>(count);

		if (cursor.moveToFirst()) {
			if (identityScope != null) {
				identityScope.lock();
				identityScope.reserveRoom(count);
			}
			try {
				do {
					list.add(loadCurrentDeep(cursor, false));
				} while (cursor.moveToNext());
			} finally {
				if (identityScope != null) {
					identityScope.unlock();
				}
			}
		}
		return list;
	}

	protected List<GroupLabel> loadDeepAllAndCloseCursor(final Cursor cursor) {
		try {
			return loadAllDeepFromCursor(cursor);
		} finally {
			cursor.close();
		}
	}

	/** A raw-style query where you can pass any WHERE clause and arguments. */
	public List<GroupLabel> queryDeep(final String where, final String... selectionArg) {
		final Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
		return loadDeepAllAndCloseCursor(cursor);
	}

}
