package com.missionhub.model;

import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table KEYWORD.
 */
public class Keyword {

	private Long id;
	private Long organization_id;
	private String keyword;
	private String state;

	/** Used to resolve relations */
	private transient DaoSession daoSession;

	/** Used for active entity operations. */
	private transient KeywordDao myDao;

	private List<Question> questions;

	public Keyword() {}

	public Keyword(final Long id) {
		this.id = id;
	}

	public Keyword(final Long id, final Long organization_id, final String keyword, final String state) {
		this.id = id;
		this.organization_id = organization_id;
		this.keyword = keyword;
		this.state = state;
	}

	/** called by internal mechanisms, do not call yourself. */
	public void __setDaoSession(final DaoSession daoSession) {
		this.daoSession = daoSession;
		myDao = daoSession != null ? daoSession.getKeywordDao() : null;
	}

	public Long getId() {
		return id;
	}

	public void setId(final Long id) {
		this.id = id;
	}

	public Long getOrganization_id() {
		return organization_id;
	}

	public void setOrganization_id(final Long organization_id) {
		this.organization_id = organization_id;
	}

	public String getKeyword() {
		return keyword;
	}

	public void setKeyword(final String keyword) {
		this.keyword = keyword;
	}

	public String getState() {
		return state;
	}

	public void setState(final String state) {
		this.state = state;
	}

	/**
	 * To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted,
	 * make changes to the target entity.
	 */
	public synchronized List<Question> getQuestions() {
		if (questions == null) {
			if (daoSession == null) {
				throw new DaoException("Entity is detached from DAO context");
			}
			final QuestionDao targetDao = daoSession.getQuestionDao();
			questions = targetDao._queryKeyword_Questions(id);
		}
		return questions;
	}

	/** Resets a to-many relationship, making the next get call to query for a fresh result. */
	public synchronized void resetQuestions() {
		questions = null;
	}

	/** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
	public void delete() {
		if (myDao == null) {
			throw new DaoException("Entity is detached from DAO context");
		}
		myDao.delete(this);
	}

	/** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
	public void update() {
		if (myDao == null) {
			throw new DaoException("Entity is detached from DAO context");
		}
		myDao.update(this);
	}

	/** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
	public void refresh() {
		if (myDao == null) {
			throw new DaoException("Entity is detached from DAO context");
		}
		myDao.refresh(this);
	}

}
