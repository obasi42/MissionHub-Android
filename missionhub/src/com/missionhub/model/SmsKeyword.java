package com.missionhub.model;

import com.missionhub.model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table SMS_KEYWORD.
 */
public class SmsKeyword implements com.missionhub.model.TimestampedEntity {

    private Long id;
    private String keyword;
    private Long organization_id;
    private Long user_id;
    private String explanation;
    private String state;
    private String initial_response;
    private Long survey_id;
    private String updated_at;
    private String created_at;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient SmsKeywordDao myDao;

    private Organization organization;
    private Long organization__resolvedKey;

    private Survey survey;
    private Long survey__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public SmsKeyword() {
    }

    public SmsKeyword(Long id) {
        this.id = id;
    }

    public SmsKeyword(Long id, String keyword, Long organization_id, Long user_id, String explanation, String state, String initial_response, Long survey_id, String updated_at, String created_at) {
        this.id = id;
        this.keyword = keyword;
        this.organization_id = organization_id;
        this.user_id = user_id;
        this.explanation = explanation;
        this.state = state;
        this.initial_response = initial_response;
        this.survey_id = survey_id;
        this.updated_at = updated_at;
        this.created_at = created_at;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getSmsKeywordDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getKeyword() {
        return keyword;
    }

    public void setKeyword(String keyword) {
        this.keyword = keyword;
    }

    public Long getOrganization_id() {
        return organization_id;
    }

    public void setOrganization_id(Long organization_id) {
        this.organization_id = organization_id;
    }

    public Long getUser_id() {
        return user_id;
    }

    public void setUser_id(Long user_id) {
        this.user_id = user_id;
    }

    public String getExplanation() {
        return explanation;
    }

    public void setExplanation(String explanation) {
        this.explanation = explanation;
    }

    public String getState() {
        return state;
    }

    public void setState(String state) {
        this.state = state;
    }

    public String getInitial_response() {
        return initial_response;
    }

    public void setInitial_response(String initial_response) {
        this.initial_response = initial_response;
    }

    public Long getSurvey_id() {
        return survey_id;
    }

    public void setSurvey_id(Long survey_id) {
        this.survey_id = survey_id;
    }

    public String getUpdated_at() {
        return updated_at;
    }

    public void setUpdated_at(String updated_at) {
        this.updated_at = updated_at;
    }

    public String getCreated_at() {
        return created_at;
    }

    public void setCreated_at(String created_at) {
        this.created_at = created_at;
    }

    /** To-one relationship, resolved on first access. */
    public Organization getOrganization() {
        Long __key = this.organization_id;
        if (organization__resolvedKey == null || !organization__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            OrganizationDao targetDao = daoSession.getOrganizationDao();
            Organization organizationNew = targetDao.load(__key);
            synchronized (this) {
                organization = organizationNew;
            	organization__resolvedKey = __key;
            }
        }
        return organization;
    }

    public void setOrganization(Organization organization) {
        synchronized (this) {
            this.organization = organization;
            organization_id = organization == null ? null : organization.getId();
            organization__resolvedKey = organization_id;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Survey getSurvey() {
        Long __key = this.survey_id;
        if (survey__resolvedKey == null || !survey__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SurveyDao targetDao = daoSession.getSurveyDao();
            Survey surveyNew = targetDao.load(__key);
            synchronized (this) {
                survey = surveyNew;
            	survey__resolvedKey = __key;
            }
        }
        return survey;
    }

    public void setSurvey(Survey survey) {
        synchronized (this) {
            this.survey = survey;
            survey_id = survey == null ? null : survey.getId();
            survey__resolvedKey = survey_id;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
