package com.missionhub.model;

import android.text.Html;

import java.util.ArrayList;
import java.util.List;

import com.missionhub.R;
import com.missionhub.model.DaoSession;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import com.missionhub.util.DateUtils;
import com.missionhub.util.ResourceUtils;

import org.apache.commons.lang3.StringUtils;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.format.DateTimeFormat;
// KEEP INCLUDES END
/**
 * Entity mapped to table ANSWER_SHEET.
 */
public class AnswerSheet implements com.missionhub.model.TimestampedEntity {

    private Long id;
    private Long person_id;
    private Long survey_id;
    private String created_at;
    private String updated_at;
    private String completed_at;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient AnswerSheetDao myDao;

    private Person person;
    private Long person__resolvedKey;

    private Survey survey;
    private Long survey__resolvedKey;

    private List<Answer> answerList;

    // KEEP FIELDS - put your custom fields here
    private AnswerSheetViewCache mViewCache;
    // KEEP FIELDS END

    public AnswerSheet() {
    }

    public AnswerSheet(Long id) {
        this.id = id;
    }

    public AnswerSheet(Long id, Long person_id, Long survey_id, String created_at, String updated_at, String completed_at) {
        this.id = id;
        this.person_id = person_id;
        this.survey_id = survey_id;
        this.created_at = created_at;
        this.updated_at = updated_at;
        this.completed_at = completed_at;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getAnswerSheetDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getPerson_id() {
        return person_id;
    }

    public void setPerson_id(Long person_id) {
        this.person_id = person_id;
    }

    public Long getSurvey_id() {
        return survey_id;
    }

    public void setSurvey_id(Long survey_id) {
        this.survey_id = survey_id;
    }

    public String getCreated_at() {
        return created_at;
    }

    public void setCreated_at(String created_at) {
        this.created_at = created_at;
    }

    public String getUpdated_at() {
        return updated_at;
    }

    public void setUpdated_at(String updated_at) {
        this.updated_at = updated_at;
    }

    public String getCompleted_at() {
        return completed_at;
    }

    public void setCompleted_at(String completed_at) {
        this.completed_at = completed_at;
    }

    /** To-one relationship, resolved on first access. */
    public Person getPerson() {
        Long __key = this.person_id;
        if (person__resolvedKey == null || !person__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PersonDao targetDao = daoSession.getPersonDao();
            Person personNew = targetDao.load(__key);
            synchronized (this) {
                person = personNew;
            	person__resolvedKey = __key;
            }
        }
        return person;
    }

    public void setPerson(Person person) {
        synchronized (this) {
            this.person = person;
            person_id = person == null ? null : person.getId();
            person__resolvedKey = person_id;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Survey getSurvey() {
        Long __key = this.survey_id;
        if (survey__resolvedKey == null || !survey__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SurveyDao targetDao = daoSession.getSurveyDao();
            Survey surveyNew = targetDao.load(__key);
            synchronized (this) {
                survey = surveyNew;
            	survey__resolvedKey = __key;
            }
        }
        return survey;
    }

    public void setSurvey(Survey survey) {
        synchronized (this) {
            this.survey = survey;
            survey_id = survey == null ? null : survey.getId();
            survey__resolvedKey = survey_id;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Answer> getAnswerList() {
        if (answerList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AnswerDao targetDao = daoSession.getAnswerDao();
            List<Answer> answerListNew = targetDao._queryAnswerSheet_AnswerList(id);
            synchronized (this) {
                if(answerList == null) {
                    answerList = answerListNew;
                }
            }
        }
        return answerList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetAnswerList() {
        answerList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    public void refreshAll() {
        refresh();
        invalidateViewCache();
    }

    public synchronized void invalidateViewCache() {
        mViewCache = null;
    }

    public void deleteWithRelations() {
        if (daoSession == null) {
            throw new DaoException("Entity is detached from DAO context");
        }

        daoSession.getAnswerDao().deleteByKeyInTx(daoSession.getAnswerDao().queryBuilder().where(AnswerDao.Properties.Answer_sheet_id.eq(getId())).<Long>listKeys());
        delete();
    }

    public AnswerSheetViewCache getViewCache() {
        if (mViewCache == null) {
            synchronized (this) {
                mViewCache = new AnswerSheetViewCache();
                DateTime timestamp = null;
                if (StringUtils.isNotEmpty(getUpdated_at())) {
                    timestamp = DateUtils.parseISO8601(getUpdated_at());
                } else if (StringUtils.isNotEmpty(getCreated_at())) {
                    timestamp = DateUtils.parseISO8601(getCreated_at());
                }
                if (timestamp != null) {
                    mViewCache.timestamp = timestamp.toString(DateTimeFormat.forPattern("d MMM yyyy h:mm a").withZone(DateTimeZone.getDefault()));
                }

                if (getSurvey() != null) {
                    mViewCache.action = Html.fromHtml(String.format(ResourceUtils.getString(R.string.profile_survey_action), getPerson().getName(), getSurvey().getTitle()));
                    List<Answer> answers = getAnswerList();
                    List<CharSequence> qa = new ArrayList<CharSequence>();
                    for(Answer answer : answers) {
                        Question question = answer.getQuestion();
                        if (question != null) {
                            if (StringUtils.isNotEmpty(answer.getValue())) {
                                qa.add("<b>"+question.getLabel()+"</b> "+answer.getValue());
                            } else {
                                qa.add("<b>"+question.getLabel()+"</b> No Response");
                            }
                        }
                    }
                    mViewCache.qa = Html.fromHtml(StringUtils.join(qa, "<br/><br/>"));
                }
            }
        }
        return mViewCache;
    }

    public class AnswerSheetViewCache {
        public CharSequence timestamp;
        public CharSequence action;
        public CharSequence qa;
    }
    // KEEP METHODS END

}
