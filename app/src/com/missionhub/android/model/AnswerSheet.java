package com.missionhub.android.model;

import java.util.List;
import com.missionhub.android.model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table ANSWER_SHEET.
 */
public class AnswerSheet {

    private Long id;
    private Long person_id;
    private Long survey_id;
    private java.util.Date created_at;
    private java.util.Date updated_at;
    private java.util.Date completed_at;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient AnswerSheetDao myDao;

    private Person person;
    private Long person__resolvedKey;

    private Survey survey;
    private Long survey__resolvedKey;

    private List<Answer> answerList;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public AnswerSheet() {
    }

    public AnswerSheet(Long id) {
        this.id = id;
    }

    public AnswerSheet(Long id, Long person_id, Long survey_id, java.util.Date created_at, java.util.Date updated_at, java.util.Date completed_at) {
        this.id = id;
        this.person_id = person_id;
        this.survey_id = survey_id;
        this.created_at = created_at;
        this.updated_at = updated_at;
        this.completed_at = completed_at;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getAnswerSheetDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getPerson_id() {
        return person_id;
    }

    public void setPerson_id(Long person_id) {
        this.person_id = person_id;
    }

    public Long getSurvey_id() {
        return survey_id;
    }

    public void setSurvey_id(Long survey_id) {
        this.survey_id = survey_id;
    }

    public java.util.Date getCreated_at() {
        return created_at;
    }

    public void setCreated_at(java.util.Date created_at) {
        this.created_at = created_at;
    }

    public java.util.Date getUpdated_at() {
        return updated_at;
    }

    public void setUpdated_at(java.util.Date updated_at) {
        this.updated_at = updated_at;
    }

    public java.util.Date getCompleted_at() {
        return completed_at;
    }

    public void setCompleted_at(java.util.Date completed_at) {
        this.completed_at = completed_at;
    }

    /** To-one relationship, resolved on first access. */
    public Person getPerson() {
        Long __key = this.person_id;
        if (person__resolvedKey == null || !person__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PersonDao targetDao = daoSession.getPersonDao();
            Person personNew = targetDao.load(__key);
            synchronized (this) {
                person = personNew;
            	person__resolvedKey = __key;
            }
        }
        return person;
    }

    public void setPerson(Person person) {
        synchronized (this) {
            this.person = person;
            person_id = person == null ? null : person.getId();
            person__resolvedKey = person_id;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Survey getSurvey() {
        Long __key = this.survey_id;
        if (survey__resolvedKey == null || !survey__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SurveyDao targetDao = daoSession.getSurveyDao();
            Survey surveyNew = targetDao.load(__key);
            synchronized (this) {
                survey = surveyNew;
            	survey__resolvedKey = __key;
            }
        }
        return survey;
    }

    public void setSurvey(Survey survey) {
        synchronized (this) {
            this.survey = survey;
            survey_id = survey == null ? null : survey.getId();
            survey__resolvedKey = survey_id;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Answer> getAnswerList() {
        if (answerList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AnswerDao targetDao = daoSession.getAnswerDao();
            List<Answer> answerListNew = targetDao._queryAnswerSheet_AnswerList(id);
            synchronized (this) {
                if(answerList == null) {
                    answerList = answerListNew;
                }
            }
        }
        return answerList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetAnswerList() {
        answerList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
	public void deleteWithRelations() {
		if (daoSession == null) {
            throw new DaoException("Entity is detached from DAO context");
        }

		daoSession.getAnswerDao().deleteByKeyInTx(daoSession.getAnswerDao().queryBuilder().where(AnswerDao.Properties.Answer_sheet_id.eq(getId())).<Long>listKeys());
		delete();
	}
    // KEEP METHODS END

}
