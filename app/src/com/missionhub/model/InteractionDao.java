package com.missionhub.model;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.missionhub.model.Interaction;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table INTERACTION.
*/
public class InteractionDao extends AbstractDao<Interaction, Long> {

    public static final String TABLENAME = "INTERACTION";

    /**
     * Properties of entity Interaction.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Interaction_type_id = new Property(1, Long.class, "interaction_type_id", false, "INTERACTION_TYPE_ID");
        public final static Property Receiver_id = new Property(2, Long.class, "receiver_id", false, "RECEIVER_ID");
        public final static Property Organization_id = new Property(3, Long.class, "organization_id", false, "ORGANIZATION_ID");
        public final static Property Created_by_id = new Property(4, Long.class, "created_by_id", false, "CREATED_BY_ID");
        public final static Property Updated_by_id = new Property(5, Long.class, "updated_by_id", false, "UPDATED_BY_ID");
        public final static Property Comment = new Property(6, String.class, "comment", false, "COMMENT");
        public final static Property Privacy_setting = new Property(7, String.class, "privacy_setting", false, "PRIVACY_SETTING");
        public final static Property Timestamp = new Property(8, String.class, "timestamp", false, "TIMESTAMP");
        public final static Property Created_at = new Property(9, String.class, "created_at", false, "CREATED_AT");
        public final static Property Updated_at = new Property(10, String.class, "updated_at", false, "UPDATED_AT");
    };

    private DaoSession daoSession;

    private Query<Interaction> person_ReceivedInteractionsQuery;
    private Query<Interaction> organization_InteractionListQuery;
    private Query<Interaction> person_CreatedInteractionsQuery;
    private Query<Interaction> person_UpdatedInteractionsQuery;

    public InteractionDao(DaoConfig config) {
        super(config);
    }
    
    public InteractionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'INTERACTION' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'INTERACTION_TYPE_ID' INTEGER," + // 1: interaction_type_id
                "'RECEIVER_ID' INTEGER," + // 2: receiver_id
                "'ORGANIZATION_ID' INTEGER," + // 3: organization_id
                "'CREATED_BY_ID' INTEGER," + // 4: created_by_id
                "'UPDATED_BY_ID' INTEGER," + // 5: updated_by_id
                "'COMMENT' TEXT," + // 6: comment
                "'PRIVACY_SETTING' TEXT," + // 7: privacy_setting
                "'TIMESTAMP' TEXT," + // 8: timestamp
                "'CREATED_AT' TEXT," + // 9: created_at
                "'UPDATED_AT' TEXT);"); // 10: updated_at
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'INTERACTION'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Interaction entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long interaction_type_id = entity.getInteraction_type_id();
        if (interaction_type_id != null) {
            stmt.bindLong(2, interaction_type_id);
        }
 
        Long receiver_id = entity.getReceiver_id();
        if (receiver_id != null) {
            stmt.bindLong(3, receiver_id);
        }
 
        Long organization_id = entity.getOrganization_id();
        if (organization_id != null) {
            stmt.bindLong(4, organization_id);
        }
 
        Long created_by_id = entity.getCreated_by_id();
        if (created_by_id != null) {
            stmt.bindLong(5, created_by_id);
        }
 
        Long updated_by_id = entity.getUpdated_by_id();
        if (updated_by_id != null) {
            stmt.bindLong(6, updated_by_id);
        }
 
        String comment = entity.getComment();
        if (comment != null) {
            stmt.bindString(7, comment);
        }
 
        String privacy_setting = entity.getPrivacy_setting();
        if (privacy_setting != null) {
            stmt.bindString(8, privacy_setting);
        }
 
        String timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindString(9, timestamp);
        }
 
        String created_at = entity.getCreated_at();
        if (created_at != null) {
            stmt.bindString(10, created_at);
        }
 
        String updated_at = entity.getUpdated_at();
        if (updated_at != null) {
            stmt.bindString(11, updated_at);
        }
    }

    @Override
    protected void attachEntity(Interaction entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Interaction readEntity(Cursor cursor, int offset) {
        Interaction entity = new Interaction( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // interaction_type_id
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // receiver_id
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // organization_id
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // created_by_id
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // updated_by_id
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // comment
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // privacy_setting
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // timestamp
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // created_at
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // updated_at
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Interaction entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setInteraction_type_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setReceiver_id(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setOrganization_id(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setCreated_by_id(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setUpdated_by_id(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setComment(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPrivacy_setting(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTimestamp(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCreated_at(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUpdated_at(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Interaction entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Interaction entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "receivedInteractions" to-many relationship of Person. */
    public List<Interaction> _queryPerson_ReceivedInteractions(Long receiver_id) {
        synchronized (this) {
            if (person_ReceivedInteractionsQuery == null) {
                QueryBuilder<Interaction> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Receiver_id.eq(null));
                person_ReceivedInteractionsQuery = queryBuilder.build();
            }
        }
        Query<Interaction> query = person_ReceivedInteractionsQuery.forCurrentThread();
        query.setParameter(0, receiver_id);
        return query.list();
    }

    /** Internal query to resolve the "interactionList" to-many relationship of Organization. */
    public List<Interaction> _queryOrganization_InteractionList(Long organization_id) {
        synchronized (this) {
            if (organization_InteractionListQuery == null) {
                QueryBuilder<Interaction> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Organization_id.eq(null));
                organization_InteractionListQuery = queryBuilder.build();
            }
        }
        Query<Interaction> query = organization_InteractionListQuery.forCurrentThread();
        query.setParameter(0, organization_id);
        return query.list();
    }

    /** Internal query to resolve the "createdInteractions" to-many relationship of Person. */
    public List<Interaction> _queryPerson_CreatedInteractions(Long created_by_id) {
        synchronized (this) {
            if (person_CreatedInteractionsQuery == null) {
                QueryBuilder<Interaction> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Created_by_id.eq(null));
                person_CreatedInteractionsQuery = queryBuilder.build();
            }
        }
        Query<Interaction> query = person_CreatedInteractionsQuery.forCurrentThread();
        query.setParameter(0, created_by_id);
        return query.list();
    }

    /** Internal query to resolve the "updatedInteractions" to-many relationship of Person. */
    public List<Interaction> _queryPerson_UpdatedInteractions(Long updated_by_id) {
        synchronized (this) {
            if (person_UpdatedInteractionsQuery == null) {
                QueryBuilder<Interaction> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Updated_by_id.eq(null));
                person_UpdatedInteractionsQuery = queryBuilder.build();
            }
        }
        Query<Interaction> query = person_UpdatedInteractionsQuery.forCurrentThread();
        query.setParameter(0, updated_by_id);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getPersonDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getOrganizationDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getPersonDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T3", daoSession.getPersonDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T4", daoSession.getInteractionTypeDao().getAllColumns());
            builder.append(" FROM INTERACTION T");
            builder.append(" LEFT JOIN PERSON T0 ON T.'RECEIVER_ID'=T0.'_id'");
            builder.append(" LEFT JOIN ORGANIZATION T1 ON T.'ORGANIZATION_ID'=T1.'_id'");
            builder.append(" LEFT JOIN PERSON T2 ON T.'CREATED_BY_ID'=T2.'_id'");
            builder.append(" LEFT JOIN PERSON T3 ON T.'UPDATED_BY_ID'=T3.'_id'");
            builder.append(" LEFT JOIN INTERACTION_TYPE T4 ON T.'INTERACTION_TYPE_ID'=T4.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Interaction loadCurrentDeep(Cursor cursor, boolean lock) {
        Interaction entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Person receiver = loadCurrentOther(daoSession.getPersonDao(), cursor, offset);
        entity.setReceiver(receiver);
        offset += daoSession.getPersonDao().getAllColumns().length;

        Organization organization = loadCurrentOther(daoSession.getOrganizationDao(), cursor, offset);
        entity.setOrganization(organization);
        offset += daoSession.getOrganizationDao().getAllColumns().length;

        Person creator = loadCurrentOther(daoSession.getPersonDao(), cursor, offset);
        entity.setCreator(creator);
        offset += daoSession.getPersonDao().getAllColumns().length;

        Person updater = loadCurrentOther(daoSession.getPersonDao(), cursor, offset);
        entity.setUpdater(updater);
        offset += daoSession.getPersonDao().getAllColumns().length;

        InteractionType interactionType = loadCurrentOther(daoSession.getInteractionTypeDao(), cursor, offset);
        entity.setInteractionType(interactionType);

        return entity;    
    }

    public Interaction loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Interaction> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Interaction> list = new ArrayList<Interaction>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Interaction> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Interaction> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
