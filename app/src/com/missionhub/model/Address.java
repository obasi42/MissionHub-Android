package com.missionhub.model;

import com.missionhub.model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import com.missionhub.model.gson.GAddress;
import com.missionhub.util.ArrayUtils;
import com.missionhub.util.IntentHelper;
import com.missionhub.util.ResourceUtils;

import org.apache.commons.lang3.StringUtils;

import java.util.ArrayList;
import java.util.List;
// KEEP INCLUDES END
/**
 * Entity mapped to table ADDRESS.
 */
public class Address {

    private Long id;
    private Long person_id;
    private String address1;
    private String address2;
    private String city;
    private String state;
    private String country;
    private String zip;
    private String address_type;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient AddressDao myDao;

    private Person person;
    private Long person__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    private AddressViewCache mViewCache;
    // KEEP FIELDS END

    public Address() {
    }

    public Address(Long id) {
        this.id = id;
    }

    public Address(Long id, Long person_id, String address1, String address2, String city, String state, String country, String zip, String address_type) {
        this.id = id;
        this.person_id = person_id;
        this.address1 = address1;
        this.address2 = address2;
        this.city = city;
        this.state = state;
        this.country = country;
        this.zip = zip;
        this.address_type = address_type;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getAddressDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getPerson_id() {
        return person_id;
    }

    public void setPerson_id(Long person_id) {
        this.person_id = person_id;
    }

    public String getAddress1() {
        return address1;
    }

    public void setAddress1(String address1) {
        this.address1 = address1;
    }

    public String getAddress2() {
        return address2;
    }

    public void setAddress2(String address2) {
        this.address2 = address2;
    }

    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    public String getState() {
        return state;
    }

    public void setState(String state) {
        this.state = state;
    }

    public String getCountry() {
        return country;
    }

    public void setCountry(String country) {
        this.country = country;
    }

    public String getZip() {
        return zip;
    }

    public void setZip(String zip) {
        this.zip = zip;
    }

    public String getAddress_type() {
        return address_type;
    }

    public void setAddress_type(String address_type) {
        this.address_type = address_type;
    }

    /** To-one relationship, resolved on first access. */
    public Person getPerson() {
        Long __key = this.person_id;
        if (person__resolvedKey == null || !person__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PersonDao targetDao = daoSession.getPersonDao();
            Person personNew = targetDao.load(__key);
            synchronized (this) {
                person = personNew;
            	person__resolvedKey = __key;
            }
        }
        return person;
    }

    public void setPerson(Person person) {
        synchronized (this) {
            this.person = person;
            person_id = person == null ? null : person.getId();
            person__resolvedKey = person_id;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    public GAddress getGModel() {
        final GAddress a = new GAddress();
        a.id = getId();
        a.address1 = getAddress1();
        a.address2 = getAddress2();
        a.city = getCity();
        a.country = getCountry();
        a.state = getState();
        a.zip = getZip();
        a.address_type = getAddress_type();
        return a;
    }

    @Override
    public String toString() {
        return StringUtils.join(ArrayUtils.clean(new String[]{getAddress1(), getAddress2(), getCity(), getState(), getZip(), getCountry()}), ", ");
    }

    public synchronized void refreshAll() {
        refresh();
        invalidateViewCache();
    }

    public synchronized void invalidateViewCache() {
        mViewCache = null;
    }

    public AddressViewCache getViewCache() {
        if (mViewCache == null) {
            synchronized (this) {
                mViewCache = new AddressViewCache();
                mViewCache.type = ResourceUtils.getTranslatedName("address_type", getAddress_type(), getAddress_type());
                List<String> line1 = new ArrayList<String>();
                for(String item : new String[] {getAddress1(), getAddress2()}) {
                    if (StringUtils.isNotEmpty(item)) {
                        item = item.trim();
                        line1.add(item);
                    }
                }
                mViewCache.line1 = StringUtils.join(line1, ", ");

                List<String> line2 = new ArrayList<String>();
                for(String item : new String[] {getCity(), getState(), getZip(), getCountry()}) {
                    if (StringUtils.isNotEmpty(item)) {
                        item = item.trim();
                        line2.add(item);
                    }
                }
                mViewCache.line2 = StringUtils.join(line2, ", ");
                mViewCache.onClick = new Runnable() {
                    @Override
                    public void run() {
                        IntentHelper.openMap(Address.this);
                    }
                };
            }
        }
        return mViewCache;
    }

    public static class AddressViewCache {
        public CharSequence type;
        public CharSequence line1;
        public CharSequence line2;
        public Runnable onClick;
    }
    // KEEP METHODS END

}
