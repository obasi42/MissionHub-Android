package com.missionhub.model;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table Groups.
*/
public class GroupDao extends AbstractDao<Group, Long> {

    public static final String TABLENAME = "Groups";

    /**
     * Properties of entity Group.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Location = new Property(2, String.class, "location", false, "LOCATION");
        public final static Property Meets = new Property(3, String.class, "meets", false, "MEETS");
        public final static Property Meeting_day = new Property(4, String.class, "meeting_day", false, "MEETING_DAY");
        public final static Property Start_time = new Property(5, Integer.class, "start_time", false, "START_TIME");
        public final static Property End_time = new Property(6, Integer.class, "end_time", false, "END_TIME");
        public final static Property Organization_id = new Property(7, Long.class, "organization_id", false, "ORGANIZATION_ID");
        public final static Property List_publicly = new Property(8, Boolean.class, "list_publicly", false, "LIST_PUBLICLY");
        public final static Property Approve_join_requests = new Property(9, Boolean.class, "approve_join_requests", false, "APPROVE_JOIN_REQUESTS");
        public final static Property Updated_at = new Property(10, java.util.Date.class, "updated_at", false, "UPDATED_AT");
        public final static Property Created_at = new Property(11, java.util.Date.class, "created_at", false, "CREATED_AT");
    };

    private DaoSession daoSession;

    private Query<Group> organization_GroupListQuery;

    public GroupDao(DaoConfig config) {
        super(config);
    }
    
    public GroupDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'Groups' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'NAME' TEXT," + // 1: name
                "'LOCATION' TEXT," + // 2: location
                "'MEETS' TEXT," + // 3: meets
                "'MEETING_DAY' TEXT," + // 4: meeting_day
                "'START_TIME' INTEGER," + // 5: start_time
                "'END_TIME' INTEGER," + // 6: end_time
                "'ORGANIZATION_ID' INTEGER," + // 7: organization_id
                "'LIST_PUBLICLY' INTEGER," + // 8: list_publicly
                "'APPROVE_JOIN_REQUESTS' INTEGER," + // 9: approve_join_requests
                "'UPDATED_AT' INTEGER," + // 10: updated_at
                "'CREATED_AT' INTEGER);"); // 11: created_at
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'Groups'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Group entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(3, location);
        }
 
        String meets = entity.getMeets();
        if (meets != null) {
            stmt.bindString(4, meets);
        }
 
        String meeting_day = entity.getMeeting_day();
        if (meeting_day != null) {
            stmt.bindString(5, meeting_day);
        }
 
        Integer start_time = entity.getStart_time();
        if (start_time != null) {
            stmt.bindLong(6, start_time);
        }
 
        Integer end_time = entity.getEnd_time();
        if (end_time != null) {
            stmt.bindLong(7, end_time);
        }
 
        Long organization_id = entity.getOrganization_id();
        if (organization_id != null) {
            stmt.bindLong(8, organization_id);
        }
 
        Boolean list_publicly = entity.getList_publicly();
        if (list_publicly != null) {
            stmt.bindLong(9, list_publicly ? 1l: 0l);
        }
 
        Boolean approve_join_requests = entity.getApprove_join_requests();
        if (approve_join_requests != null) {
            stmt.bindLong(10, approve_join_requests ? 1l: 0l);
        }
 
        java.util.Date updated_at = entity.getUpdated_at();
        if (updated_at != null) {
            stmt.bindLong(11, updated_at.getTime());
        }
 
        java.util.Date created_at = entity.getCreated_at();
        if (created_at != null) {
            stmt.bindLong(12, created_at.getTime());
        }
    }

    @Override
    protected void attachEntity(Group entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Group readEntity(Cursor cursor, int offset) {
        Group entity = new Group( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // location
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // meets
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // meeting_day
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // start_time
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // end_time
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // organization_id
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // list_publicly
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // approve_join_requests
            cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)), // updated_at
            cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)) // created_at
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Group entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLocation(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMeets(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMeeting_day(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStart_time(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setEnd_time(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setOrganization_id(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setList_publicly(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setApprove_join_requests(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setUpdated_at(cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)));
        entity.setCreated_at(cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Group entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Group entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "groupList" to-many relationship of Organization. */
    public List<Group> _queryOrganization_GroupList(Long organization_id) {
        synchronized (this) {
            if (organization_GroupListQuery == null) {
                QueryBuilder<Group> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Organization_id.eq(null));
                organization_GroupListQuery = queryBuilder.build();
            }
        }
        Query<Group> query = organization_GroupListQuery.forCurrentThread();
        query.setParameter(0, organization_id);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getOrganizationDao().getAllColumns());
            builder.append(" FROM Groups T");
            builder.append(" LEFT JOIN ORGANIZATION T0 ON T.'ORGANIZATION_ID'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Group loadCurrentDeep(Cursor cursor, boolean lock) {
        Group entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Organization organization = loadCurrentOther(daoSession.getOrganizationDao(), cursor, offset);
        entity.setOrganization(organization);

        return entity;    
    }

    public Group loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Group> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Group> list = new ArrayList<Group>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Group> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Group> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
