package com.missionhub.model;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.missionhub.model.PhoneNumber;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PHONE_NUMBER.
*/
public class PhoneNumberDao extends AbstractDao<PhoneNumber, Long> {

    public static final String TABLENAME = "PHONE_NUMBER";

    /**
     * Properties of entity PhoneNumber.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Number = new Property(1, String.class, "number", false, "NUMBER");
        public final static Property Location = new Property(2, String.class, "location", false, "LOCATION");
        public final static Property Primary = new Property(3, Boolean.class, "primary", false, "PRIMARY");
        public final static Property Txt_to_email = new Property(4, String.class, "txt_to_email", false, "TXT_TO_EMAIL");
        public final static Property Email_updated_at = new Property(5, String.class, "email_updated_at", false, "EMAIL_UPDATED_AT");
        public final static Property Person_id = new Property(6, Long.class, "person_id", false, "PERSON_ID");
        public final static Property Updated_at = new Property(7, String.class, "updated_at", false, "UPDATED_AT");
        public final static Property Created_at = new Property(8, String.class, "created_at", false, "CREATED_AT");
    };

    private DaoSession daoSession;

    private Query<PhoneNumber> person_PhoneNumberListQuery;

    public PhoneNumberDao(DaoConfig config) {
        super(config);
    }
    
    public PhoneNumberDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PHONE_NUMBER' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'NUMBER' TEXT," + // 1: number
                "'LOCATION' TEXT," + // 2: location
                "'PRIMARY' INTEGER," + // 3: primary
                "'TXT_TO_EMAIL' TEXT," + // 4: txt_to_email
                "'EMAIL_UPDATED_AT' TEXT," + // 5: email_updated_at
                "'PERSON_ID' INTEGER," + // 6: person_id
                "'UPDATED_AT' TEXT," + // 7: updated_at
                "'CREATED_AT' TEXT);"); // 8: created_at
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PHONE_NUMBER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PhoneNumber entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(2, number);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(3, location);
        }
 
        Boolean primary = entity.getPrimary();
        if (primary != null) {
            stmt.bindLong(4, primary ? 1l: 0l);
        }
 
        String txt_to_email = entity.getTxt_to_email();
        if (txt_to_email != null) {
            stmt.bindString(5, txt_to_email);
        }
 
        String email_updated_at = entity.getEmail_updated_at();
        if (email_updated_at != null) {
            stmt.bindString(6, email_updated_at);
        }
 
        Long person_id = entity.getPerson_id();
        if (person_id != null) {
            stmt.bindLong(7, person_id);
        }
 
        String updated_at = entity.getUpdated_at();
        if (updated_at != null) {
            stmt.bindString(8, updated_at);
        }
 
        String created_at = entity.getCreated_at();
        if (created_at != null) {
            stmt.bindString(9, created_at);
        }
    }

    @Override
    protected void attachEntity(PhoneNumber entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PhoneNumber readEntity(Cursor cursor, int offset) {
        PhoneNumber entity = new PhoneNumber( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // number
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // location
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // primary
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // txt_to_email
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // email_updated_at
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // person_id
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // updated_at
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // created_at
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PhoneNumber entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNumber(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLocation(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPrimary(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setTxt_to_email(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEmail_updated_at(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPerson_id(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setUpdated_at(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCreated_at(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PhoneNumber entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PhoneNumber entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "phoneNumberList" to-many relationship of Person. */
    public List<PhoneNumber> _queryPerson_PhoneNumberList(Long person_id) {
        synchronized (this) {
            if (person_PhoneNumberListQuery == null) {
                QueryBuilder<PhoneNumber> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Person_id.eq(null));
                person_PhoneNumberListQuery = queryBuilder.build();
            }
        }
        Query<PhoneNumber> query = person_PhoneNumberListQuery.forCurrentThread();
        query.setParameter(0, person_id);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getPersonDao().getAllColumns());
            builder.append(" FROM PHONE_NUMBER T");
            builder.append(" LEFT JOIN PERSON T0 ON T.'PERSON_ID'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected PhoneNumber loadCurrentDeep(Cursor cursor, boolean lock) {
        PhoneNumber entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Person person = loadCurrentOther(daoSession.getPersonDao(), cursor, offset);
        entity.setPerson(person);

        return entity;    
    }

    public PhoneNumber loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<PhoneNumber> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<PhoneNumber> list = new ArrayList<PhoneNumber>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<PhoneNumber> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<PhoneNumber> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
