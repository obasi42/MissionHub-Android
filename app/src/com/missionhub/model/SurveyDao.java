package com.missionhub.model;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SURVEY.
*/
public class SurveyDao extends AbstractDao<Survey, Long> {

    public static final String TABLENAME = "SURVEY";

    /**
     * Properties of entity Survey.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Organization_id = new Property(2, Long.class, "organization_id", false, "ORGANIZATION_ID");
        public final static Property Post_survey_message = new Property(3, String.class, "post_survey_message", false, "POST_SURVEY_MESSAGE");
        public final static Property Terminology = new Property(4, String.class, "terminology", false, "TERMINOLOGY");
        public final static Property Login_paragraph = new Property(5, String.class, "login_paragraph", false, "LOGIN_PARAGRAPH");
        public final static Property Is_frozen = new Property(6, Boolean.class, "is_frozen", false, "IS_FROZEN");
        public final static Property Updated_at = new Property(7, java.util.Date.class, "updated_at", false, "UPDATED_AT");
        public final static Property Created_at = new Property(8, java.util.Date.class, "created_at", false, "CREATED_AT");
    };

    private DaoSession daoSession;

    private Query<Survey> organization_SurveysQuery;

    public SurveyDao(DaoConfig config) {
        super(config);
    }
    
    public SurveyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SURVEY' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'TITLE' TEXT," + // 1: title
                "'ORGANIZATION_ID' INTEGER," + // 2: organization_id
                "'POST_SURVEY_MESSAGE' TEXT," + // 3: post_survey_message
                "'TERMINOLOGY' TEXT," + // 4: terminology
                "'LOGIN_PARAGRAPH' TEXT," + // 5: login_paragraph
                "'IS_FROZEN' INTEGER," + // 6: is_frozen
                "'UPDATED_AT' INTEGER," + // 7: updated_at
                "'CREATED_AT' INTEGER);"); // 8: created_at
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SURVEY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Survey entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        Long organization_id = entity.getOrganization_id();
        if (organization_id != null) {
            stmt.bindLong(3, organization_id);
        }
 
        String post_survey_message = entity.getPost_survey_message();
        if (post_survey_message != null) {
            stmt.bindString(4, post_survey_message);
        }
 
        String terminology = entity.getTerminology();
        if (terminology != null) {
            stmt.bindString(5, terminology);
        }
 
        String login_paragraph = entity.getLogin_paragraph();
        if (login_paragraph != null) {
            stmt.bindString(6, login_paragraph);
        }
 
        Boolean is_frozen = entity.getIs_frozen();
        if (is_frozen != null) {
            stmt.bindLong(7, is_frozen ? 1l: 0l);
        }
 
        java.util.Date updated_at = entity.getUpdated_at();
        if (updated_at != null) {
            stmt.bindLong(8, updated_at.getTime());
        }
 
        java.util.Date created_at = entity.getCreated_at();
        if (created_at != null) {
            stmt.bindLong(9, created_at.getTime());
        }
    }

    @Override
    protected void attachEntity(Survey entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Survey readEntity(Cursor cursor, int offset) {
        Survey entity = new Survey( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // organization_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // post_survey_message
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // terminology
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // login_paragraph
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // is_frozen
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // updated_at
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)) // created_at
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Survey entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOrganization_id(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setPost_survey_message(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTerminology(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLogin_paragraph(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIs_frozen(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setUpdated_at(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setCreated_at(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Survey entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Survey entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "surveys" to-many relationship of Organization. */
    public List<Survey> _queryOrganization_Surveys(Long organization_id) {
        synchronized (this) {
            if (organization_SurveysQuery == null) {
                QueryBuilder<Survey> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Organization_id.eq(null));
                organization_SurveysQuery = queryBuilder.build();
            }
        }
        Query<Survey> query = organization_SurveysQuery.forCurrentThread();
        query.setParameter(0, organization_id);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getOrganizationDao().getAllColumns());
            builder.append(" FROM SURVEY T");
            builder.append(" LEFT JOIN ORGANIZATION T0 ON T.'ORGANIZATION_ID'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Survey loadCurrentDeep(Cursor cursor, boolean lock) {
        Survey entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Organization organization = loadCurrentOther(daoSession.getOrganizationDao(), cursor, offset);
        entity.setOrganization(organization);

        return entity;    
    }

    public Survey loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Survey> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Survey> list = new ArrayList<Survey>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Survey> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Survey> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
