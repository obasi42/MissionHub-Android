package com.missionhub.model;

import java.util.List;

import com.missionhub.model.DaoSession;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import java.util.ArrayList;
// KEEP INCLUDES END

/**
 * Entity mapped to table INTERACTION.
 */
public class Interaction {

    private Long id;
    private Long interaction_type_id;
    private Long receiver_id;
    private Long organization_id;
    private Long created_by_id;
    private Long updated_by_id;
    private String comment;
    private String privacy_setting;
    private String timestamp;
    private String created_at;
    private String updated_at;

    /**
     * Used to resolve relations
     */
    private transient DaoSession daoSession;

    /**
     * Used for active entity operations.
     */
    private transient InteractionDao myDao;

    private Person receiver;
    private Long receiver__resolvedKey;

    private Organization organization;
    private Long organization__resolvedKey;

    private Person creator;
    private Long creator__resolvedKey;

    private Person updater;
    private Long updater__resolvedKey;

    private InteractionType interactionType;
    private Long interactionType__resolvedKey;

    private List<InteractionInitiator> interactionInitiatorList;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Interaction() {
    }

    public Interaction(Long id) {
        this.id = id;
    }

    public Interaction(Long id, Long interaction_type_id, Long receiver_id, Long organization_id, Long created_by_id, Long updated_by_id, String comment, String privacy_setting, String timestamp, String created_at, String updated_at) {
        this.id = id;
        this.interaction_type_id = interaction_type_id;
        this.receiver_id = receiver_id;
        this.organization_id = organization_id;
        this.created_by_id = created_by_id;
        this.updated_by_id = updated_by_id;
        this.comment = comment;
        this.privacy_setting = privacy_setting;
        this.timestamp = timestamp;
        this.created_at = created_at;
        this.updated_at = updated_at;
    }

    /**
     * called by internal mechanisms, do not call yourself.
     */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getInteractionDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getInteraction_type_id() {
        return interaction_type_id;
    }

    public void setInteraction_type_id(Long interaction_type_id) {
        this.interaction_type_id = interaction_type_id;
    }

    public Long getReceiver_id() {
        return receiver_id;
    }

    public void setReceiver_id(Long receiver_id) {
        this.receiver_id = receiver_id;
    }

    public Long getOrganization_id() {
        return organization_id;
    }

    public void setOrganization_id(Long organization_id) {
        this.organization_id = organization_id;
    }

    public Long getCreated_by_id() {
        return created_by_id;
    }

    public void setCreated_by_id(Long created_by_id) {
        this.created_by_id = created_by_id;
    }

    public Long getUpdated_by_id() {
        return updated_by_id;
    }

    public void setUpdated_by_id(Long updated_by_id) {
        this.updated_by_id = updated_by_id;
    }

    public String getComment() {
        return comment;
    }

    public void setComment(String comment) {
        this.comment = comment;
    }

    public String getPrivacy_setting() {
        return privacy_setting;
    }

    public void setPrivacy_setting(String privacy_setting) {
        this.privacy_setting = privacy_setting;
    }

    public String getTimestamp() {
        return timestamp;
    }

    public void setTimestamp(String timestamp) {
        this.timestamp = timestamp;
    }

    public String getCreated_at() {
        return created_at;
    }

    public void setCreated_at(String created_at) {
        this.created_at = created_at;
    }

    public String getUpdated_at() {
        return updated_at;
    }

    public void setUpdated_at(String updated_at) {
        this.updated_at = updated_at;
    }

    /**
     * To-one relationship, resolved on first access.
     */
    public Person getReceiver() {
        Long __key = this.receiver_id;
        if (receiver__resolvedKey == null || !receiver__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PersonDao targetDao = daoSession.getPersonDao();
            Person receiverNew = targetDao.load(__key);
            synchronized (this) {
                receiver = receiverNew;
                receiver__resolvedKey = __key;
            }
        }
        return receiver;
    }

    public void setReceiver(Person receiver) {
        synchronized (this) {
            this.receiver = receiver;
            receiver_id = receiver == null ? null : receiver.getId();
            receiver__resolvedKey = receiver_id;
        }
    }

    /**
     * To-one relationship, resolved on first access.
     */
    public Organization getOrganization() {
        Long __key = this.organization_id;
        if (organization__resolvedKey == null || !organization__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            OrganizationDao targetDao = daoSession.getOrganizationDao();
            Organization organizationNew = targetDao.load(__key);
            synchronized (this) {
                organization = organizationNew;
                organization__resolvedKey = __key;
            }
        }
        return organization;
    }

    public void setOrganization(Organization organization) {
        synchronized (this) {
            this.organization = organization;
            organization_id = organization == null ? null : organization.getId();
            organization__resolvedKey = organization_id;
        }
    }

    /**
     * To-one relationship, resolved on first access.
     */
    public Person getCreator() {
        Long __key = this.created_by_id;
        if (creator__resolvedKey == null || !creator__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PersonDao targetDao = daoSession.getPersonDao();
            Person creatorNew = targetDao.load(__key);
            synchronized (this) {
                creator = creatorNew;
                creator__resolvedKey = __key;
            }
        }
        return creator;
    }

    public void setCreator(Person creator) {
        synchronized (this) {
            this.creator = creator;
            created_by_id = creator == null ? null : creator.getId();
            creator__resolvedKey = created_by_id;
        }
    }

    /**
     * To-one relationship, resolved on first access.
     */
    public Person getUpdater() {
        Long __key = this.updated_by_id;
        if (updater__resolvedKey == null || !updater__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PersonDao targetDao = daoSession.getPersonDao();
            Person updaterNew = targetDao.load(__key);
            synchronized (this) {
                updater = updaterNew;
                updater__resolvedKey = __key;
            }
        }
        return updater;
    }

    public void setUpdater(Person updater) {
        synchronized (this) {
            this.updater = updater;
            updated_by_id = updater == null ? null : updater.getId();
            updater__resolvedKey = updated_by_id;
        }
    }

    /**
     * To-one relationship, resolved on first access.
     */
    public InteractionType getInteractionType() {
        Long __key = this.interaction_type_id;
        if (interactionType__resolvedKey == null || !interactionType__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            InteractionTypeDao targetDao = daoSession.getInteractionTypeDao();
            InteractionType interactionTypeNew = targetDao.load(__key);
            synchronized (this) {
                interactionType = interactionTypeNew;
                interactionType__resolvedKey = __key;
            }
        }
        return interactionType;
    }

    public void setInteractionType(InteractionType interactionType) {
        synchronized (this) {
            this.interactionType = interactionType;
            interaction_type_id = interactionType == null ? null : interactionType.getId();
            interactionType__resolvedKey = interaction_type_id;
        }
    }

    /**
     * To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity.
     */
    public List<InteractionInitiator> getInteractionInitiatorList() {
        if (interactionInitiatorList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            InteractionInitiatorDao targetDao = daoSession.getInteractionInitiatorDao();
            List<InteractionInitiator> interactionInitiatorListNew = targetDao._queryInteraction_InteractionInitiatorList(id);
            synchronized (this) {
                if (interactionInitiatorList == null) {
                    interactionInitiatorList = interactionInitiatorListNew;
                }
            }
        }
        return interactionInitiatorList;
    }

    /**
     * Resets a to-many relationship, making the next get call to query for a fresh result.
     */
    public synchronized void resetInteractionInitiatorList() {
        interactionInitiatorList = null;
    }

    /**
     * Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context.
     */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /**
     * Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context.
     */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /**
     * Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context.
     */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    public void deleteWithRelations() {
        if (daoSession == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        daoSession.getInteractionInitiatorDao().deleteByKeyInTx(daoSession.getInteractionInitiatorDao().queryBuilder().where(InteractionInitiatorDao.Properties.Interaction_id.eq(getId())).<Long>listKeys());
        delete();
    }

    public synchronized Long[] getInitiatorIds() {
        List<Long> ids = new ArrayList<Long>();
        List<InteractionInitiator> initiators = getInteractionInitiatorList();
        for (InteractionInitiator initiator : initiators) {
            ids.add(initiator.getId());
        }
        return ids.toArray(new Long[ids.size()]);
    }
    // KEEP METHODS END

}
