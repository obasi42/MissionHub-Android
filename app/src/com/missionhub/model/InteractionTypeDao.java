package com.missionhub.model;

import java.util.List;
import java.util.ArrayList;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.missionhub.model.InteractionType;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table INTERACTION_TYPE.
 */
public class InteractionTypeDao extends AbstractDao<InteractionType, Long> {

    public static final String TABLENAME = "INTERACTION_TYPE";

    /**
     * Properties of entity InteractionType.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Organization_id = new Property(1, Long.class, "organization_id", false, "ORGANIZATION_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property I18n = new Property(3, String.class, "i18n", false, "I18N");
        public final static Property Icon = new Property(4, String.class, "icon", false, "ICON");
        public final static Property Updated_at = new Property(5, String.class, "updated_at", false, "UPDATED_AT");
        public final static Property Created_at = new Property(6, String.class, "created_at", false, "CREATED_AT");
    }

    ;

    private DaoSession daoSession;

    private Query<InteractionType> organization_InteractionTypeListQuery;

    public InteractionTypeDao(DaoConfig config) {
        super(config);
    }

    public InteractionTypeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'INTERACTION_TYPE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ORGANIZATION_ID' INTEGER," + // 1: organization_id
                "'NAME' TEXT," + // 2: name
                "'I18N' TEXT," + // 3: i18n
                "'ICON' TEXT," + // 4: icon
                "'UPDATED_AT' TEXT," + // 5: updated_at
                "'CREATED_AT' TEXT);"); // 6: created_at
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'INTERACTION_TYPE'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, InteractionType entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        Long organization_id = entity.getOrganization_id();
        if (organization_id != null) {
            stmt.bindLong(2, organization_id);
        }

        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }

        String i18n = entity.getI18n();
        if (i18n != null) {
            stmt.bindString(4, i18n);
        }

        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(5, icon);
        }

        String updated_at = entity.getUpdated_at();
        if (updated_at != null) {
            stmt.bindString(6, updated_at);
        }

        String created_at = entity.getCreated_at();
        if (created_at != null) {
            stmt.bindString(7, created_at);
        }
    }

    @Override
    protected void attachEntity(InteractionType entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public InteractionType readEntity(Cursor cursor, int offset) {
        InteractionType entity = new InteractionType( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // organization_id
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // i18n
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // icon
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // updated_at
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // created_at
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, InteractionType entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOrganization_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setI18n(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIcon(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUpdated_at(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCreated_at(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(InteractionType entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(InteractionType entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Internal query to resolve the "interactionTypeList" to-many relationship of Organization.
     */
    public List<InteractionType> _queryOrganization_InteractionTypeList(Long organization_id) {
        synchronized (this) {
            if (organization_InteractionTypeListQuery == null) {
                QueryBuilder<InteractionType> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Organization_id.eq(null));
                organization_InteractionTypeListQuery = queryBuilder.build();
            }
        }
        Query<InteractionType> query = organization_InteractionTypeListQuery.forCurrentThread();
        query.setParameter(0, organization_id);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getOrganizationDao().getAllColumns());
            builder.append(" FROM INTERACTION_TYPE T");
            builder.append(" LEFT JOIN ORGANIZATION T0 ON T.'ORGANIZATION_ID'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }

    protected InteractionType loadCurrentDeep(Cursor cursor, boolean lock) {
        InteractionType entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Organization organization = loadCurrentOther(daoSession.getOrganizationDao(), cursor, offset);
        entity.setOrganization(organization);

        return entity;
    }

    public InteractionType loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();

        String[] keyArray = new String[]{key.toString()};
        Cursor cursor = db.rawQuery(sql, keyArray);

        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }

    /**
     * Reads all available rows from the given cursor and returns a list of new ImageTO objects.
     */
    public List<InteractionType> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<InteractionType> list = new ArrayList<InteractionType>(count);

        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }

    protected List<InteractionType> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }


    /**
     * A raw-style query where you can pass any WHERE clause and arguments.
     */
    public List<InteractionType> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }

}
