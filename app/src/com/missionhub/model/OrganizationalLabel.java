package com.missionhub.model;

import com.missionhub.model.DaoSession;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table ORGANIZATIONAL_LABEL.
 */
public class OrganizationalLabel {

    private Long id;
    private Long person_id;
    private Long organization_id;
    private Long added_by_id;
    private Long label_id;
    private String start_date;
    private String updated_at;
    private String created_at;
    private String removed_date;

    /**
     * Used to resolve relations
     */
    private transient DaoSession daoSession;

    /**
     * Used for active entity operations.
     */
    private transient OrganizationalLabelDao myDao;

    private Person person;
    private Long person__resolvedKey;

    private Organization organization;
    private Long organization__resolvedKey;

    private Person addedByPerson;
    private Long addedByPerson__resolvedKey;

    private Label label;
    private Long label__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public OrganizationalLabel() {
    }

    public OrganizationalLabel(Long id) {
        this.id = id;
    }

    public OrganizationalLabel(Long id, Long person_id, Long organization_id, Long added_by_id, Long label_id, String start_date, String updated_at, String created_at, String removed_date) {
        this.id = id;
        this.person_id = person_id;
        this.organization_id = organization_id;
        this.added_by_id = added_by_id;
        this.label_id = label_id;
        this.start_date = start_date;
        this.updated_at = updated_at;
        this.created_at = created_at;
        this.removed_date = removed_date;
    }

    /**
     * called by internal mechanisms, do not call yourself.
     */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getOrganizationalLabelDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getPerson_id() {
        return person_id;
    }

    public void setPerson_id(Long person_id) {
        this.person_id = person_id;
    }

    public Long getOrganization_id() {
        return organization_id;
    }

    public void setOrganization_id(Long organization_id) {
        this.organization_id = organization_id;
    }

    public Long getAdded_by_id() {
        return added_by_id;
    }

    public void setAdded_by_id(Long added_by_id) {
        this.added_by_id = added_by_id;
    }

    public Long getLabel_id() {
        return label_id;
    }

    public void setLabel_id(Long label_id) {
        this.label_id = label_id;
    }

    public String getStart_date() {
        return start_date;
    }

    public void setStart_date(String start_date) {
        this.start_date = start_date;
    }

    public String getUpdated_at() {
        return updated_at;
    }

    public void setUpdated_at(String updated_at) {
        this.updated_at = updated_at;
    }

    public String getCreated_at() {
        return created_at;
    }

    public void setCreated_at(String created_at) {
        this.created_at = created_at;
    }

    public String getRemoved_date() {
        return removed_date;
    }

    public void setRemoved_date(String removed_date) {
        this.removed_date = removed_date;
    }

    /**
     * To-one relationship, resolved on first access.
     */
    public Person getPerson() {
        Long __key = this.person_id;
        if (person__resolvedKey == null || !person__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PersonDao targetDao = daoSession.getPersonDao();
            Person personNew = targetDao.load(__key);
            synchronized (this) {
                person = personNew;
                person__resolvedKey = __key;
            }
        }
        return person;
    }

    public void setPerson(Person person) {
        synchronized (this) {
            this.person = person;
            person_id = person == null ? null : person.getId();
            person__resolvedKey = person_id;
        }
    }

    /**
     * To-one relationship, resolved on first access.
     */
    public Organization getOrganization() {
        Long __key = this.organization_id;
        if (organization__resolvedKey == null || !organization__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            OrganizationDao targetDao = daoSession.getOrganizationDao();
            Organization organizationNew = targetDao.load(__key);
            synchronized (this) {
                organization = organizationNew;
                organization__resolvedKey = __key;
            }
        }
        return organization;
    }

    public void setOrganization(Organization organization) {
        synchronized (this) {
            this.organization = organization;
            organization_id = organization == null ? null : organization.getId();
            organization__resolvedKey = organization_id;
        }
    }

    /**
     * To-one relationship, resolved on first access.
     */
    public Person getAddedByPerson() {
        Long __key = this.added_by_id;
        if (addedByPerson__resolvedKey == null || !addedByPerson__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PersonDao targetDao = daoSession.getPersonDao();
            Person addedByPersonNew = targetDao.load(__key);
            synchronized (this) {
                addedByPerson = addedByPersonNew;
                addedByPerson__resolvedKey = __key;
            }
        }
        return addedByPerson;
    }

    public void setAddedByPerson(Person addedByPerson) {
        synchronized (this) {
            this.addedByPerson = addedByPerson;
            added_by_id = addedByPerson == null ? null : addedByPerson.getId();
            addedByPerson__resolvedKey = added_by_id;
        }
    }

    /**
     * To-one relationship, resolved on first access.
     */
    public Label getLabel() {
        Long __key = this.label_id;
        if (label__resolvedKey == null || !label__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LabelDao targetDao = daoSession.getLabelDao();
            Label labelNew = targetDao.load(__key);
            synchronized (this) {
                label = labelNew;
                label__resolvedKey = __key;
            }
        }
        return label;
    }

    public void setLabel(Label label) {
        synchronized (this) {
            this.label = label;
            label_id = label == null ? null : label.getId();
            label__resolvedKey = label_id;
        }
    }

    /**
     * Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context.
     */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /**
     * Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context.
     */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /**
     * Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context.
     */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
