package com.missionhub.model;

import com.missionhub.model.DaoSession;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import android.content.Context;

import com.missionhub.application.Application;

import org.apache.commons.lang3.StringUtils;
// KEEP INCLUDES END

/**
 * Entity mapped to table LABEL.
 */
public class Label {

    private Long id;
    private String name;
    private Long organization_id;
    private String i18n;
    private String updated_at;
    private String created_at;

    /**
     * Used to resolve relations
     */
    private transient DaoSession daoSession;

    /**
     * Used for active entity operations.
     */
    private transient LabelDao myDao;

    private Organization organization;
    private Long organization__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    private String mTranslatedName;
    // KEEP FIELDS END

    public Label() {
    }

    public Label(Long id) {
        this.id = id;
    }

    public Label(Long id, String name, Long organization_id, String i18n, String updated_at, String created_at) {
        this.id = id;
        this.name = name;
        this.organization_id = organization_id;
        this.i18n = i18n;
        this.updated_at = updated_at;
        this.created_at = created_at;
    }

    /**
     * called by internal mechanisms, do not call yourself.
     */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getLabelDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Long getOrganization_id() {
        return organization_id;
    }

    public void setOrganization_id(Long organization_id) {
        this.organization_id = organization_id;
    }

    public String getI18n() {
        return i18n;
    }

    public void setI18n(String i18n) {
        this.i18n = i18n;
    }

    public String getUpdated_at() {
        return updated_at;
    }

    public void setUpdated_at(String updated_at) {
        this.updated_at = updated_at;
    }

    public String getCreated_at() {
        return created_at;
    }

    public void setCreated_at(String created_at) {
        this.created_at = created_at;
    }

    /**
     * To-one relationship, resolved on first access.
     */
    public Organization getOrganization() {
        Long __key = this.organization_id;
        if (organization__resolvedKey == null || !organization__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            OrganizationDao targetDao = daoSession.getOrganizationDao();
            Organization organizationNew = targetDao.load(__key);
            synchronized (this) {
                organization = organizationNew;
                organization__resolvedKey = __key;
            }
        }
        return organization;
    }

    public void setOrganization(Organization organization) {
        synchronized (this) {
            this.organization = organization;
            organization_id = organization == null ? null : organization.getId();
            organization__resolvedKey = organization_id;
        }
    }

    /**
     * Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context.
     */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /**
     * Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context.
     */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /**
     * Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context.
     */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    public void deleteWithRelations() {
        if (daoSession == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        daoSession.getOrganizationalLabelDao().deleteByKeyInTx(daoSession.getOrganizationalLabelDao().queryBuilder().where(OrganizationalLabelDao.Properties.Label_id.eq(getId())).<Long>listKeys());
        delete();
    }

    public String getTranslatedName() {
        if (mTranslatedName == null) {
            if (StringUtils.isNotEmpty(getI18n())) {
                final Context context = Application.getContext();
                final int id = context.getResources().getIdentifier("permission_" + getI18n(), "string", context.getPackageName());
                if (id != 0) {
                    mTranslatedName = context.getString(id);
                }
            }
            mTranslatedName = getName();
        }
        return mTranslatedName;
    }

    public void resetTranslatedName() {
        mTranslatedName = null;
    }

    public void refreshAll() {
        refresh();
        resetTranslatedName();
    }
    // KEEP METHODS END

}
