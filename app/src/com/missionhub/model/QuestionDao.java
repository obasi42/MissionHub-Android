package com.missionhub.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.missionhub.model.Question;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table QUESTION.
 */
public class QuestionDao extends AbstractDao<Question, Long> {

    public static final String TABLENAME = "QUESTION";

    /**
     * Properties of entity Question.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Kind = new Property(1, String.class, "kind", false, "KIND");
        public final static Property Style = new Property(2, String.class, "style", false, "STYLE");
        public final static Property Label = new Property(3, String.class, "label", false, "LABEL");
        public final static Property Content = new Property(4, String.class, "content", false, "CONTENT");
        public final static Property Object_name = new Property(5, String.class, "object_name", false, "OBJECT_NAME");
        public final static Property Attribute_name = new Property(6, String.class, "attribute_name", false, "ATTRIBUTE_NAME");
        public final static Property Web_only = new Property(7, Boolean.class, "web_only", false, "WEB_ONLY");
        public final static Property Trigger_words = new Property(8, String.class, "trigger_words", false, "TRIGGER_WORDS");
        public final static Property Notify_via = new Property(9, String.class, "notify_via", false, "NOTIFY_VIA");
        public final static Property Hidden = new Property(10, Boolean.class, "hidden", false, "HIDDEN");
        public final static Property Updated_at = new Property(11, String.class, "updated_at", false, "UPDATED_AT");
        public final static Property Created_at = new Property(12, String.class, "created_at", false, "CREATED_AT");
    }

    ;

    private DaoSession daoSession;


    public QuestionDao(DaoConfig config) {
        super(config);
    }

    public QuestionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'QUESTION' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'KIND' TEXT," + // 1: kind
                "'STYLE' TEXT," + // 2: style
                "'LABEL' TEXT," + // 3: label
                "'CONTENT' TEXT," + // 4: content
                "'OBJECT_NAME' TEXT," + // 5: object_name
                "'ATTRIBUTE_NAME' TEXT," + // 6: attribute_name
                "'WEB_ONLY' INTEGER," + // 7: web_only
                "'TRIGGER_WORDS' TEXT," + // 8: trigger_words
                "'NOTIFY_VIA' TEXT," + // 9: notify_via
                "'HIDDEN' INTEGER," + // 10: hidden
                "'UPDATED_AT' TEXT," + // 11: updated_at
                "'CREATED_AT' TEXT);"); // 12: created_at
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'QUESTION'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, Question entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String kind = entity.getKind();
        if (kind != null) {
            stmt.bindString(2, kind);
        }

        String style = entity.getStyle();
        if (style != null) {
            stmt.bindString(3, style);
        }

        String label = entity.getLabel();
        if (label != null) {
            stmt.bindString(4, label);
        }

        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }

        String object_name = entity.getObject_name();
        if (object_name != null) {
            stmt.bindString(6, object_name);
        }

        String attribute_name = entity.getAttribute_name();
        if (attribute_name != null) {
            stmt.bindString(7, attribute_name);
        }

        Boolean web_only = entity.getWeb_only();
        if (web_only != null) {
            stmt.bindLong(8, web_only ? 1l : 0l);
        }

        String trigger_words = entity.getTrigger_words();
        if (trigger_words != null) {
            stmt.bindString(9, trigger_words);
        }

        String notify_via = entity.getNotify_via();
        if (notify_via != null) {
            stmt.bindString(10, notify_via);
        }

        Boolean hidden = entity.getHidden();
        if (hidden != null) {
            stmt.bindLong(11, hidden ? 1l : 0l);
        }

        String updated_at = entity.getUpdated_at();
        if (updated_at != null) {
            stmt.bindString(12, updated_at);
        }

        String created_at = entity.getCreated_at();
        if (created_at != null) {
            stmt.bindString(13, created_at);
        }
    }

    @Override
    protected void attachEntity(Question entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public Question readEntity(Cursor cursor, int offset) {
        Question entity = new Question( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // kind
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // style
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // label
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // content
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // object_name
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // attribute_name
                cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // web_only
                cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // trigger_words
                cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // notify_via
                cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0, // hidden
                cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // updated_at
                cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // created_at
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, Question entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setKind(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStyle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLabel(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setObject_name(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAttribute_name(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setWeb_only(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setTrigger_words(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setNotify_via(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setHidden(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
        entity.setUpdated_at(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCreated_at(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(Question entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(Question entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
